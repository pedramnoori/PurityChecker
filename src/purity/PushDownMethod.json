[ {
  "id" : 1104952,
  "repository" : "https://github.com/gradle/gradle.git",
  "sha1" : "04bcfe98dbe7b05e508559930c21379ece845732",
  "url" : "https://github.com/gradle/gradle/commit/04bcfe98dbe7b05e508559930c21379ece845732",
  "author" : "Cedric Champeau",
  "time" : "6/8/15 9:02 AM",
  "refactorings" : [ {
    "type" : "Extract Interface",
    "description" : "Extract Interface org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ResolvedArtifactsContainer from class org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.ResolvedArtifactResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Class",
    "description" : "Move Class org.gradle.internal.component.model.ComponentArtifactIdentifier moved to org.gradle.api.artifacts.component.ComponentArtifactIdentifier",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method private assertHasArtifacts() : void from class org.gradle.api.internal.artifacts.ResolverResults to private assertHasArtifacts() : void from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method private assertHasResult() : void from class org.gradle.api.internal.artifacts.ResolverResults to private assertHasResult() : void from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public eachResolvedProject(action Action<ResolvedProjectConfiguration>) : void from class org.gradle.api.internal.artifacts.ResolverResults to public eachResolvedProject(action Action<ResolvedProjectConfiguration>) : void from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public failed(failure ResolveException) : void from class org.gradle.api.internal.artifacts.ResolverResults to public failed(failure ResolveException) : void from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getArtifactsBuilder() : ResolvedArtifactsBuilder from class org.gradle.api.internal.artifacts.ResolverResults to public getArtifactsBuilder() : ResolvedArtifactsBuilder from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getGraphResults() : ResolvedGraphResults from class org.gradle.api.internal.artifacts.ResolverResults to public getGraphResults() : ResolvedGraphResults from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getTransientConfigurationResultsBuilder() : TransientConfigurationResultsBuilder from class org.gradle.api.internal.artifacts.ResolverResults to public getTransientConfigurationResultsBuilder() : TransientConfigurationResultsBuilder from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public resolved(resolutionResult ResolutionResult, resolvedLocalComponentsResult ResolvedLocalComponentsResult) : void from class org.gradle.api.internal.artifacts.ResolverResults to public resolved(resolutionResult ResolutionResult, resolvedLocalComponentsResult ResolvedLocalComponentsResult) : void from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public retainState(graphResults ResolvedGraphResults, artifactResults ResolvedArtifactsBuilder, transientConfigurationResultsBuilder TransientConfigurationResultsBuilder) : void from class org.gradle.api.internal.artifacts.ResolverResults to public retainState(graphResults ResolvedGraphResults, artifactResults ResolvedArtifactsBuilder, transientConfigurationResultsBuilder TransientConfigurationResultsBuilder) : void from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public withResolvedConfiguration(resolvedConfiguration ResolvedConfiguration) : void from class org.gradle.api.internal.artifacts.ResolverResults to public withResolvedConfiguration(resolvedConfiguration ResolvedConfiguration) : void from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down method. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private fatalFailure : ResolveException from class org.gradle.api.internal.artifacts.ResolverResults to private fatalFailure : ResolveException from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down Attribute. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private graphResults : ResolvedGraphResults from class org.gradle.api.internal.artifacts.ResolverResults to private graphResults : ResolvedGraphResults from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down Attribute. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private resolutionResult : ResolutionResult from class org.gradle.api.internal.artifacts.ResolverResults to private resolutionResult : ResolutionResult from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down Attribute. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private resolvedConfiguration : ResolvedConfiguration from class org.gradle.api.internal.artifacts.ResolverResults to private resolvedConfiguration : ResolvedConfiguration from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down Attribute. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private resolvedLocalComponentsResult : ResolvedLocalComponentsResult from class org.gradle.api.internal.artifacts.ResolverResults to private resolvedLocalComponentsResult : ResolvedLocalComponentsResult from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down Attribute. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private transientConfigurationResultsBuilder : TransientConfigurationResultsBuilder from class org.gradle.api.internal.artifacts.ResolverResults to private transientConfigurationResultsBuilder : TransientConfigurationResultsBuilder from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down Attribute. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private artifactResults : ResolvedArtifactsBuilder from class org.gradle.api.internal.artifacts.ResolverResults to private artifactResults : ResolvedArtifactsBuilder from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : "DefaultResolverResults is a new class and extracted from ResolverResults. Thus, it is an extract class not push down Attribute. Since RefDiff cannot detect this kind of refactorings we may have to call this as TP",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getResolutionResult() : ResolutionResult from class org.gradle.api.internal.artifacts.ResolverResults to public getResolutionResult() : ResolutionResult from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getResolvedConfiguration() : ResolvedConfiguration from class org.gradle.api.internal.artifacts.ResolverResults to public getResolvedConfiguration() : ResolvedConfiguration from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getResolvedLocalComponents() : ResolvedLocalComponentsResult from class org.gradle.api.internal.artifacts.ResolverResults to public getResolvedLocalComponents() : ResolvedLocalComponentsResult from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public hasError() : boolean from class org.gradle.api.internal.artifacts.ResolverResults to public hasError() : boolean from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Subclass",
    "description" : "Extract Subclass org.gradle.api.internal.artifacts.DefaultResolverResults from class org.gradle.api.internal.artifacts.ResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolve(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.CacheLockingArtifactDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolveArtifacts(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.CacheLockingArtifactDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolve(configuration ConfigurationInternal, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.DefaultConfigurationResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolveArtifacts(configuration ConfigurationInternal, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.DefaultConfigurationResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolve(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.ErrorHandlingArtifactDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolveArtifacts(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.ErrorHandlingArtifactDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolve(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.SelfResolvingDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolveArtifacts(contextInternal ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.SelfResolvingDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolve(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.ShortcircuitEmptyConfigsArtifactDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolveArtifacts(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.ShortcircuitEmptyConfigsArtifactDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolve(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.resolveengine.DefaultDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolveArtifacts(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ivyservice.resolveengine.DefaultDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type onResolve : Action<ResolverResults> to onResolve : Action<DefaultResolverResults> in method public resolve(resolveContext ResolveContext, onResolve Action<DefaultResolverResults>) : void from class org.gradle.language.java.plugins.JavaLanguagePlugin.DependencyResolvingClasspath",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolve(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ArtifactDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolveArtifacts(resolveContext ResolveContext, repositories List<? extends ResolutionAwareRepository>, metadataHandler GlobalDependencyResolutionRules, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ArtifactDependencyResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolve(configuration ConfigurationInternal, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ConfigurationResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type results : ResolverResults to results : DefaultResolverResults in method public resolveArtifacts(configuration ConfigurationInternal, results DefaultResolverResults) : void from class org.gradle.api.internal.artifacts.ConfigurationResolver",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type cachedResolverResults : ResolverResults to cachedResolverResults : DefaultResolverResults in class org.gradle.api.internal.artifacts.configurations.DefaultConfiguration",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type resolverResults : ResolverResults to resolverResults : DefaultResolverResults in method public execute(resolverResults DefaultResolverResults) : void from class org.gradle.language.java.plugins.JavaLanguagePlugin.DependencyResolvingClasspath.assertResolved.resolve.new Action<DefaultResolverResults>",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type ResolvedArtifactsBuilder to ResolvedArtifactsContainer in method public getResolvedArtifacts() : ResolvedArtifactsContainer in class org.gradle.api.internal.artifacts.ResolverResults",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type resolve : ResolvedArtifactResults to resolvedLocalComponents : ResolvedLocalComponentsResult in method public execute(resolverResults DefaultResolverResults) : void in class org.gradle.language.java.plugins.JavaLanguagePlugin.DependencyResolvingClasspath.assertResolved.resolve",
    "comment" : "<p>the functionality has changed. A for loop has been deleted.</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method public getArtifacts() : Set<ResolvedArtifact> from class org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.ResolvedArtifactResults to public getArtifacts() : Set<ResolvedArtifact> from class org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ResolvedArtifactsContainer",
    "comment" : "<p>There is already a Extract Interface detected.&nbsp;</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getArtifactsBuilder() : ResolvedArtifactsBuilder renamed to public getResolvedArtifacts() : ResolvedArtifactsContainer in class org.gradle.api.internal.artifacts.ResolverResults",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method public hasError() : boolean from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method public getResolvedConfiguration() : ResolvedConfiguration from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method public getResolutionResult() : ResolutionResult from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method public getResolvedLocalComponents() : ResolvedLocalComponentsResult from class org.gradle.api.internal.artifacts.DefaultResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter artifactId : ComponentArtifactIdentifier in method public DefaultResolvedArtifact(owner ResolvedModuleVersion, artifact IvyArtifactName, artifactId ComponentArtifactIdentifier, artifactSource Factory<File>) from class org.gradle.api.internal.artifacts.DefaultResolvedArtifact",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Type Declaration Kind",
    "description" : "Change Type Declaration Kind class to interface in type org.gradle.api.internal.artifacts.ResolverResults",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 9978
}, {
  "id" : 1109425,
  "repository" : "https://github.com/Alluxio/alluxio.git",
  "sha1" : "6d10621465c0e6ae81ad8d240d70a55c72caeea6",
  "url" : "https://github.com/Alluxio/alluxio/commit/6d10621465c0e6ae81ad8d240d70a55c72caeea6",
  "author" : "Bin Fan",
  "time" : "6/10/15 9:21 PM",
  "refactorings" : [ {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute protected mBlockSize : long from class tachyon.worker.block.meta.BlockMetaBase to private mBlockSize : long from class tachyon.worker.block.meta.BlockMeta",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getBlockSize() : long from class tachyon.worker.block.meta.BlockMetaBase to public getBlockSize() : long from class tachyon.worker.block.meta.BlockMeta",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter blockSize : long to initialBlockSize : long in method public TempBlockMeta(userId long, blockId long, initialBlockSize long, dir StorageDir) from class tachyon.worker.block.meta.TempBlockMeta",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getBlockSize() : long from class tachyon.worker.block.meta.BlockMetaBase to public getBlockSize() : long from class tachyon.worker.block.meta.TempBlockMeta",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method public getBlockSize() : long from class tachyon.worker.block.meta.BlockMeta",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Parameter",
    "description" : "Remove Parameter blockSize : long in method public BlockMetaBase(blockId long, blockSize long, dir StorageDir) from class tachyon.worker.block.meta.BlockMetaBase",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier protected to private in attribute private mBlockSize : long from class tachyon.worker.block.meta.BlockMeta",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Encapsulate Attribute",
    "description" : "Encapsulate Attribute private mUserId : long from class tachyon.worker.block.meta.TempBlockMeta",
    "comment" : "<p>public long getUserId() is not called</p>",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute protected mDir : StorageDir from class tachyon.worker.block.meta.BlockMetaBase",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private mBlockSize : long from class tachyon.worker.block.meta.BlockMeta",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 0
}, {
  "id" : 1111363,
  "repository" : "https://github.com/spring-projects/spring-data-rest.git",
  "sha1" : "b7cba6a700d8c5e456cdeffe9c5bf54563eab7d3",
  "url" : "https://github.com/spring-projects/spring-data-rest/commit/b7cba6a700d8c5e456cdeffe9c5bf54563eab7d3",
  "author" : "Greg Turnquist",
  "time" : "6/15/15 10:32 AM",
  "refactorings" : [ {
    "type" : "Extract Method",
    "description" : "Extract Method protected setupMockMvc() : void extracted from public setUp() : void in class org.springframework.data.rest.webmvc.AbstractWebIntegrationTests",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method protected abstract expectedRootLinkRels() : Iterable<String> from class org.springframework.data.rest.webmvc.AbstractWebIntegrationTests to protected abstract expectedRootLinkRels() : Iterable<String> from class org.springframework.data.rest.webmvc.CommonWebTests",
    "comment" : "<p>abstract method</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "Abstract Method pushed down, so it's pure"
    }
  } ],
  "refDiffExecutionTime" : 0
}, {
  "id" : 1121326,
  "repository" : "https://github.com/droolsjbpm/drools.git",
  "sha1" : "c8e09e2056c54ead97bce4386a25b222154223b1",
  "url" : "https://github.com/droolsjbpm/drools/commit/c8e09e2056c54ead97bce4386a25b222154223b1",
  "author" : "kedzie",
  "time" : "6/21/15 6:50 PM",
  "refactorings" : [ {
    "type" : "Extract Interface",
    "description" : "Extract Interface org.drools.core.util.ByteArrayClassLoader from class org.drools.core.base.ClassFieldAccessorCache.ByteArrayClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Method",
    "description" : "Extract Method public loadClass(className String, classLoader ClassLoader) : Class<?> extracted from public instantiateObject(className String, classLoader ClassLoader) : Object in class org.drools.core.util.ClassUtils",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "Return expression has been added"
    }
  }, {
    "type" : "Rename Class",
    "description" : "Rename Class org.drools.core.base.ClassFieldAccessorCache.ByteArrayClassLoader renamed to org.drools.core.base.ClassFieldAccessorCache.DefaultByteArrayClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method protected loadClass(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to protected loadClass(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : "InternalTypesClassLoader renamed to DefaultInternalTypesClassLoader. a new interface is added which is called InternalTypesClassLoader ",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Method",
    "description" : "Extract Method private makeClassLoader() : InternalTypesClassLoader extracted from private defineType(name String, bytecode byte[]) : Class<?> in class org.drools.core.common.ProjectClassLoader",
    "comment" : "<p>There is only one class instance creation statement in the extracted method which exists in the place where the method is also extracted. It&nbsp;<strong>can be</strong>&nbsp;extract method then.</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "0",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "compeletely different"
    }
  }, {
    "type" : "Extract Method",
    "description" : "Extract Method private makeClassLoader() : ClassLoader extracted from public onAdd(registry DialectRuntimeRegistry, rootClassLoader ClassLoader) : void in class org.drools.core.rule.JavaDialectRuntimeData",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "0",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "compeletely different"
    }
  }, {
    "type" : "Extract Method",
    "description" : "Extract Method private makeClassLoader() : ClassLoader extracted from public reload() : void in class org.drools.core.rule.JavaDialectRuntimeData",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "0",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "compeletely different"
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method private loadType(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to public loadType(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public defineClass(name String, bytecode byte[]) : Class<?> from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to public defineClass(name String, bytecode byte[]) : Class<?> from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private projectClassLoader : ProjectClassLoader from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to private projectClassLoader : ProjectClassLoader from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : "<p>InternalTypesClassLoader renamed to DefaultInternalTypesClassLoader. a new interface is added which is called InternalTypesClassLoader</p>",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x",
    "validators" : "Matin, Davood, Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Subclass",
    "description" : "Extract Subclass org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type classLoader : PackageClassLoader to classLoader : ClassLoader in method private wireAll(classLoader ClassLoader, invokerLookups Map<String,Object>, wireList List<String>) : void from class org.drools.core.rule.JavaDialectRuntimeData",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type classLoader : PackageClassLoader to classLoader : ClassLoader in method private wire(classLoader ClassLoader, invokerLookups Map<String,Object>, className String) : void from class org.drools.core.rule.JavaDialectRuntimeData",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type classLoader : PackageClassLoader to classLoader : ClassLoader in method private wire(classLoader ClassLoader, className String, invoker Object) : void from class org.drools.core.rule.JavaDialectRuntimeData",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type classLoader : PackageClassLoader to classLoader : ClassLoader in method private WiringExecutor(classLoader ClassLoader, invokerLookups Map<String,Object>, wireList List<String>) from class org.drools.core.rule.JavaDialectRuntimeData.WiringExecutor",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type classLoader : PackageClassLoader to classLoader : ClassLoader in class org.drools.core.rule.JavaDialectRuntimeData",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type classLoader : PackageClassLoader to classLoader : ClassLoader in class org.drools.core.rule.JavaDialectRuntimeData.WiringExecutor",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move And Rename Method",
    "description" : "Move And Rename Method private InternalTypesClassLoader(projectClassLoader ProjectClassLoader) from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to private DefaultInternalTypesClassLoader(projectClassLoader ProjectClassLoader) from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Method",
    "description" : "Extract Method public instantiateObject(className String, args Object...) : Object extracted from public instantiateObject(className String) : Object in class org.drools.core.util.ClassUtils",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "RD-2x, RMiner-1x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method public defineClass(name String, bytecode byte[]) : Class<?> from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to public defineClass(name String, bytecode byte[]) : Class<?> from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : "<p>Push Down Method</p>",
    "validation" : "FP",
    "detectionTools" : "RMiner-1x",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method private loadType(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to public loadType(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : "<p>Push Down Method</p>",
    "validation" : "FP",
    "detectionTools" : "RMiner-1x",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private projectClassLoader : ProjectClassLoader from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to private projectClassLoader : ProjectClassLoader from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : "<p>Push Down Attribute</p>",
    "validation" : "FP",
    "detectionTools" : "RMiner-1x",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method protected loadClass(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader to protected loadClass(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : "<p>Push Down Method</p>",
    "validation" : "FP",
    "detectionTools" : "RMiner-1x",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to package in method package internalLoadClass(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to package in method package tryDefineType(name String, cnfe ClassNotFoundException) : Class<?> from class org.drools.core.common.ProjectClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to public in method public loadType(name String, resolve boolean) : Class<?> from class org.drools.core.common.ProjectClassLoader.DefaultInternalTypesClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Class Access Modifier",
    "description" : "Change Class Access Modifier private to package in class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Class Modifier",
    "description" : "Remove Class Modifier static in class org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Type Declaration Kind",
    "description" : "Change Type Declaration Kind class to interface in type org.drools.core.common.ProjectClassLoader.InternalTypesClassLoader",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 2686
}, {
  "id" : 1122164,
  "repository" : "https://github.com/neo4j/neo4j.git",
  "sha1" : "001de307492df8f84ad15f6aaa0bd1e748d4ce27",
  "url" : "https://github.com/neo4j/neo4j/commit/001de307492df8f84ad15f6aaa0bd1e748d4ce27",
  "author" : "Davide Grohmann",
  "time" : "6/22/15 1:34 PM",
  "refactorings" : [ {
    "type" : "Move Class",
    "description" : "Move Class org.neo4j.kernel.Recovery moved to org.neo4j.kernel.recovery.Recovery",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Class",
    "description" : "Rename Class org.neo4j.kernel.impl.transaction.log.rotation.LogRotationControl renamed to org.neo4j.kernel.impl.transaction.log.rotation.StoreFlusher",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method package rotateDone() : void renamed to package checkPointDone() : void in class synchronization.TestConcurrentRotation",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefDiff, GumTreeDiff, RD-1x, RD-2x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private rotateLog() : void renamed to private checkPoint() : void in class recovery.CountsStoreRecoveryTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private rotate(db GraphDatabaseAPI) : void renamed to private rotateAndCheckPoint(db GraphDatabaseAPI) : void in class org.neo4j.backup.BackupServiceIT",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-2x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private rotateLog(db GraphDatabaseAPI) : void renamed to private rotateLogAndCheckPoint(db GraphDatabaseAPI) : void in class org.neo4j.backup.BackupServiceStressTestingBuilder.RunTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-2x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private rotateLog() : void renamed to private rotateLogAndCheckPoint() : void in class org.neo4j.index.recovery.UniqueIndexRecoveryTests",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-2x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private rotateLogs() : void renamed to private rotateLogsAndCheckPoint() : void in class org.neo4j.kernel.api.impl.index.LuceneIndexRecoveryIT",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-2x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private rotateLogicalLog(graphdb GraphDatabaseAPI) : void renamed to private checkPoint(graphdb GraphDatabaseAPI) : void in class synchronization.TestConcurrentRotation.RotateIndexLogTask",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private rotateLog(db GraphDatabaseAPI) : void renamed to private checkPoint(db GraphDatabaseAPI) : void in class org.neo4j.kernel.impl.store.counts.CountsRotationTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private rotateLog() : void renamed to private checkPoint() : void in class recovery.TestRecoveryScenarios",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method public start() : void from class org.neo4j.kernel.Recovery to public start() : void from class org.neo4j.kernel.recovery.Recovery",
    "comment" : "It is like rename package refactroing, but since RefDiff does not detetc package level refactroing, I was expecting a move class refactroing at least. But since the class body is changed as well, it is really hard to decide which type of refactoring it is",
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method public awaitAllTransactionsClosed() : void from class org.neo4j.kernel.impl.transaction.log.rotation.LogRotationControl to private awaitAllTransactionsClosed() : void from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public close() : void extracted from public close() : void in class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor & moved to class org.neo4j.kernel.impl.transaction.log.LogEntryCursor",
    "comment" : "<p>Extract and Move to other inner class.</p><p>Statement in method close() is extracted and moved to method close() in class LogEntryCursor.java (is an added class).</p>",
    "validation" : "CTP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh, Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public next() : boolean extracted from public next() : boolean in class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor & moved to class org.neo4j.kernel.impl.transaction.log.LogEntryCursor",
    "comment" : "<p>Extract and Move to other inner class.</p><p>Statements in method next() are extracted and move to method next() in class LogEntryCursor.java (is an added class).</p>",
    "validation" : "CTP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh, Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public start(logVersion long) : LogPosition extracted from private verifyThatIndexCreationTransactionIsTheFirstOne() : void in class org.neo4j.index.impl.lucene.IndexCreationTest & moved to class org.neo4j.kernel.impl.transaction.log.LogPosition",
    "comment" : "Extract and Move to the inner class",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-2x, RMiner-1x",
    "validators" : "Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public start(logVersion long) : LogPosition extracted from public accept(visitor LogHeaderVisitor) : void in class org.neo4j.kernel.impl.transaction.log.PhysicalLogFile & moved to class org.neo4j.kernel.impl.transaction.log.LogPosition",
    "comment" : "Extract and Move to the inner class",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-2x, RMiner-1x",
    "validators" : "Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public currentPosition() : long extracted from public next() : boolean in class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor & moved to class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor.Marker",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh, Davood, Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Inline Method",
    "description" : "Inline Method private assertGet(sequence OutOfOrderSequence, number long, meta long) : void inlined to public shouldExposeGapFreeSequenceSingleThreaded() : void in class org.neo4j.kernel.impl.store.ArrayQueueOutOfOrderSequenceTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Inline Method",
    "description" : "Inline Method private assertGet(sequence OutOfOrderSequence, number long, meta long) : void inlined to public shouldExtendArrayIfNeedBe() : void in class org.neo4j.kernel.impl.store.ArrayQueueOutOfOrderSequenceTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Inline Method",
    "description" : "Inline Method private assertGet(sequence OutOfOrderSequence, number long, meta long) : void inlined to public shouldDealWithThisScenario() : void in class org.neo4j.kernel.impl.store.ArrayQueueOutOfOrderSequenceTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Inline Method",
    "description" : "Inline Method private assertGet(sequence OutOfOrderSequence, number long, meta long) : void inlined to public shouldKeepItsCoolWhenMultipleThreadsAreHammeringIt() : void in class org.neo4j.kernel.impl.store.ArrayQueueOutOfOrderSequenceTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private pruneLock : Lock from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruning to private pruneLock : Lock from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruningImpl",
    "comment" : "LogPruning changed to an interface and the LogPruningImpl did not exist (it is a new class)",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private pruneStrategy : LogPruneStrategy from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruning to private pruneStrategy : LogPruneStrategy from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruningImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private msgLog : Log from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruning to private msgLog : Log from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruningImpl",
    "comment" : "LogPruning changed to an interface and the LogPruningImpl did not exist (it is a new class)",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private monitor : Monitor from class org.neo4j.kernel.Recovery to private monitor : Monitor from class org.neo4j.kernel.recovery.Recovery",
    "comment" : "It is a move class or move package",
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private channel : T from class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor to private channel : T from class org.neo4j.kernel.impl.transaction.log.LogEntryCursor",
    "comment" : "<p>channel appears now in two new classes,&nbsp;LogEntryCursor and Maker. Both of them are now used in the source class, and the old channel (coming from the ctor's param) is passed to both of them</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private recoveredLog : boolean from class org.neo4j.kernel.Recovery to private recoveredLog : boolean from class org.neo4j.kernel.recovery.Recovery",
    "comment" : "It is a move class or move package",
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private spi : SPI from class org.neo4j.kernel.Recovery to private spi : SPI from class org.neo4j.kernel.recovery.Recovery",
    "comment" : "It is a move class or move package",
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private entryReader : LogEntryReader<T> from class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor to private entryReader : LogEntryReader<T> from class org.neo4j.kernel.impl.transaction.log.LogEntryCursor",
    "comment" : "<p>The attribute is moved to the new class which has been instantiated in the source class.</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private msgLog : Log from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruning to private msgLog : Log from class org.neo4j.kernel.impl.transaction.log.checkpoint.CheckPointerImpl",
    "comment" : "<p>There are&nbsp;different possibilities: The old class has become an interface and a new class implementing the interface is created.</p><p>1) The old class has become an interface and a new class implementing the interface is created. The attribute is pushed down to this new class</p><p>2) The new interface is extracted from the existing class (<span style='background-color: #f6d5d9;'>something&nbsp;</span>like extract super class)</p><p>3) The old class is renamed to the new class and an interface with the same name as the old class is created and the old class is now implementing it</p>",
    "validation" : "FP",
    "detectionTools" : "RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private channel : T from class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor to private channel : T from class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor.Marker",
    "comment" : "<p>channel appears now in two new classes,&nbsp;LogEntryCursor and Maker. Both of them are now used in the source class, and the old channel (coming from the ctor's param) is passed to both of them</p><p>Davood &amp; Laleh: The places where channel is used in PhysicalTransactionCursor do not relate to the places where Marker is used in the new version</p>",
    "validation" : "FP",
    "detectionTools" : "RMiner-1x",
    "validators" : "Matin, Laleh, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public finishedRotating(currentVersion long) : void from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruning to public pruneLogs(upToVersion long) : void from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruningImpl",
    "comment" : "Move and rename",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public LogPruning(pruneStrategy LogPruneStrategy, logProvider LogProvider) from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruning to public LogPruningImpl(pruneStrategy LogPruneStrategy, logProvider LogProvider) from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruningImpl",
    "comment" : "<p>new</p><p>In can be this case: LogPruning has been renamed to&nbsp;LogPruningImpl, but it now implements the interface with the same name =&gt; it will be extract interface in this case and should be pull up</p><p>Note that the method is constructor</p>",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private channel : WritableLogChannel from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest to private channel : WritableLogChannel from class org.neo4j.kernel.impl.transaction.log.checkpoint.CheckPointerImpl",
    "comment" : "<p>new</p><p>channel still exists in the source class, but as local variable.CheckPointerImpl does not have any relationship with&nbsp;WritableLogChannel</p>",
    "validation" : "FP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public start(logVersion long) : LogPosition extracted from private buildTransactionLogs(storeDir File, config Config, logProvider LogProvider, labelScanStore LabelScanStore, fileSystemAbstraction FileSystemAbstraction, neoStore NeoStore, cacheAccess CacheAccessBackDoor, indexingService IndexingService, indexProviders Iterable<IndexImplementation>) : TransactionLogModule in class org.neo4j.kernel.NeoStoreDataSource & moved to class org.neo4j.kernel.impl.transaction.log.LogPosition",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-2x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public StoreCopyServer(transactionIdStore TransactionIdStore, dataSource NeoStoreDataSource, storeFlusher StoreFlusher, fileSystem FileSystemAbstraction, storeDirectory File, monitor Monitor) from class org.neo4j.com.storecopy.StoreCopyServer",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter logRotationControlSupplier : LogRotationControl to storeFlusher : StoreFlusher in method public DefaultMasterImplSPI(graphDb GraphDatabaseAPI, fileSystemAbstraction FileSystemAbstraction, monitors Monitors, labels LabelTokenHolder, propertyKeyTokenHolder PropertyKeyTokenHolder, relationshipTypeTokenHolder RelationshipTypeTokenHolder, idGeneratorFactory IdGeneratorFactory, locks Locks, transactionCommitProcess TransactionCommitProcess, storeFlusher StoreFlusher, transactionIdStore TransactionIdStore, logicalTransactionStore LogicalTransactionStore, neoStoreDataSource NeoStoreDataSource, jobScheduler JobScheduler) from class org.neo4j.kernel.ha.cluster.DefaultMasterImplSPI",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method private buildTransactionLogs(storeDir File, config Config, logProvider LogProvider, labelScanStore LabelScanStore, fileSystemAbstraction FileSystemAbstraction, neoStore NeoStore, cacheAccess CacheAccessBackDoor, indexingService IndexingService, indexProviders Iterable<IndexImplementation>) : TransactionLogModule from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter logRotationControlSupplier : Supplier<LogRotationControl> to storeFlusherSupplier : Supplier<StoreFlusher> in method public OnlineBackupKernelExtension(config Config, graphDatabaseAPI GraphDatabaseAPI, logProvider LogProvider, monitors Monitors, neoStoreDataSource NeoStoreDataSource, storeFlusherSupplier Supplier<StoreFlusher>, transactionIdStoreSupplier Supplier<TransactionIdStore>, logicalTransactionStoreSupplier Supplier<LogicalTransactionStore>, logFileInformationSupplier Supplier<LogFileInformation>, fileSystemAbstraction FileSystemAbstraction) from class org.neo4j.backup.OnlineBackupKernelExtension",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter recoveredLogVersion : long to startPosition : LogPosition in method public recoveryRequired(startPosition LogPosition) : void from class org.neo4j.kernel.impl.transaction.log.LoggingLogFileMonitor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public shouldVisitLogFile() : void from class org.neo4j.kernel.impl.transaction.log.PhysicalLogFileTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public stop() : void from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public copyStore(writer StoreWriter) : Response<?> from class org.neo4j.com.storecopy.StoreCopyClientTest.storeCopyRequest.spy.new StoreCopyClient.StoreCopyRequester",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable recoveryVersion : long to recoveryPosition : LogPosition in method public init() : void from class org.neo4j.kernel.recovery.Recovery",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public shouldOpenInFreshDirectoryAndFinallyAddHeader() : void from class org.neo4j.kernel.impl.transaction.log.PhysicalLogFileTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Variable",
    "description" : "Extract Variable recoverer : Visitor<LogVersionedStoreChannel,IOException> in method public init() : void from class org.neo4j.kernel.recovery.Recovery",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Variable",
    "description" : "Extract Variable currentLogVersion : long in method private writeTransactionsToActiveLogFile(storeDir File, response Response<?>) : void from class org.neo4j.com.storecopy.StoreCopyClient",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Variable",
    "description" : "Extract Variable currentLogFile : File in method private writeTransactionsToActiveLogFile(storeDir File, response Response<?>) : void from class org.neo4j.com.storecopy.StoreCopyClient",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Parameterize Variable",
    "description" : "Parameterize Variable currentLogVersion : long to upToLogVersion : long in method public prune(upToLogVersion long) : void from class org.neo4j.kernel.impl.transaction.log.pruning.ThresholdBasedPruneStrategy",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in class org.neo4j.com.storecopy.StoreCopyServer",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute logRotationControlSupplier : LogRotationControl to storeFlusher : StoreFlusher in class org.neo4j.kernel.ha.cluster.DefaultMasterImplSPI",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Variable",
    "description" : "Extract Variable startEntry : LogEntryStart in method public visit(transaction CommittedTransactionRepresentation) : boolean from class org.neo4j.kernel.impl.transaction.state.RecoveryVisitor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Subclass",
    "description" : "Extract Subclass org.neo4j.kernel.impl.transaction.log.pruning.LogPruningImpl from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruning",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Class",
    "description" : "Extract Class org.neo4j.kernel.impl.transaction.log.LogEntryCursor from class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter currentVersion : long to upToVersion : long in method public pruneLogs(upToVersion long) : void from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruningImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method private buildRecovery(fileSystemAbstraction FileSystemAbstraction, cacheAccess CacheAccessBackDoor, indexingService IndexingService, indexUpdatesValidator IndexUpdatesValidator, labelScanStore LabelScanStore, neoStore NeoStore, recoveryVisitorMonitor RecoveryVisitor.Monitor, recoveryMonitor Recovery.Monitor, logFiles PhysicalLogFiles, storeFlusher StoreFlusher, startupStatistics StartupStatisticsProvider) : void from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : "<p>There is no reference mapping in the body of the method supporting this refactoring</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method private buildRecovery(fileSystemAbstraction FileSystemAbstraction, cacheAccess CacheAccessBackDoor, indexingService IndexingService, indexUpdatesValidator IndexUpdatesValidator, labelScanStore LabelScanStore, neoStore NeoStore, recoveryVisitorMonitor RecoveryVisitor.Monitor, recoveryMonitor Recovery.Monitor, logFiles PhysicalLogFiles, storeFlusher StoreFlusher, startupStatistics StartupStatisticsProvider) : void from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : "<p>There is no reference mapping in the body of the method supporting this refactoring</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type recoveredLogVersion : long to startPosition : LogPosition in method public recoveryRequired(startPosition LogPosition) : void from class org.neo4j.kernel.impl.transaction.log.LoggingLogFileMonitor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type meta : long to meta : long[] in method public offer(number long, meta long[]) : boolean from class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type meta : long to meta : long[] in method private createResult(number long, meta long[]) : long[] from class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : "<p>createResult() is extracted from <span class='blob-code-inner blob-code-marker' data-code-marker=' '><span class='pl-k'>public</span> <span class='pl-k'>long</span>[] <span class='pl-en'>get</span>()</span>, in which there is a local variable meta whose type is changing from long to long[] and is passed as argument to createResult()</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type meta : long to meta : long[] in method public seen(number long, meta long[]) : boolean from class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type meta : long to meta : long[] in method public set(number long, meta long[]) : void from class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type meta : long to meta : long[] in method private offer(sequence OutOfOrderSequence, number long, meta long[]) : boolean from class org.neo4j.kernel.impl.store.ArrayQueueOutOfOrderSequenceTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type logRotationControlSupplier : Supplier<LogRotationControl> to storeFlusherSupplier : Supplier<StoreFlusher> in method public OnlineBackupKernelExtension(config Config, graphDatabaseAPI GraphDatabaseAPI, logProvider LogProvider, monitors Monitors, neoStoreDataSource NeoStoreDataSource, storeFlusherSupplier Supplier<StoreFlusher>, transactionIdStoreSupplier Supplier<TransactionIdStore>, logicalTransactionStoreSupplier Supplier<LogicalTransactionStore>, logFileInformationSupplier Supplier<LogFileInformation>, fileSystemAbstraction FileSystemAbstraction) from class org.neo4j.backup.OnlineBackupKernelExtension",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public StoreCopyServer(transactionIdStore TransactionIdStore, dataSource NeoStoreDataSource, storeFlusher StoreFlusher, fileSystem FileSystemAbstraction, storeDirectory File, monitor Monitor) from class org.neo4j.com.storecopy.StoreCopyServer",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type logRotationControlSupplier : LogRotationControl to storeFlusher : StoreFlusher in method public DefaultMasterImplSPI(graphDb GraphDatabaseAPI, fileSystemAbstraction FileSystemAbstraction, monitors Monitors, labels LabelTokenHolder, propertyKeyTokenHolder PropertyKeyTokenHolder, relationshipTypeTokenHolder RelationshipTypeTokenHolder, idGeneratorFactory IdGeneratorFactory, locks Locks, transactionCommitProcess TransactionCommitProcess, storeFlusher StoreFlusher, transactionIdStore TransactionIdStore, logicalTransactionStore LogicalTransactionStore, neoStoreDataSource NeoStoreDataSource, jobScheduler JobScheduler) from class org.neo4j.kernel.ha.cluster.DefaultMasterImplSPI",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type meta : long to meta : long[] in method public offer(number long, meta long[]) : boolean from class org.neo4j.kernel.impl.util.OutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type meta : long to meta : long[] in method public seen(number long, meta long[]) : boolean from class org.neo4j.kernel.impl.util.OutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type meta : long to meta : long[] in method public set(number long, meta long[]) : void from class org.neo4j.kernel.impl.util.OutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method private buildTransactionLogs(storeDir File, config Config, logProvider LogProvider, labelScanStore LabelScanStore, fileSystemAbstraction FileSystemAbstraction, neoStore NeoStore, cacheAccess CacheAccessBackDoor, indexingService IndexingService, indexProviders Iterable<IndexImplementation>) : TransactionLogModule from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public stop() : void from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public shouldOpenInFreshDirectoryAndFinallyAddHeader() : void from class org.neo4j.kernel.impl.transaction.log.PhysicalLogFileTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public shouldVisitLogFile() : void from class org.neo4j.kernel.impl.transaction.log.PhysicalLogFileTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in class org.neo4j.com.storecopy.StoreCopyServer",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type logRotationControl : LogRotationControl to storeFlusher : StoreFlusher in method public copyStore(writer StoreWriter) : Response<?> from class org.neo4j.com.storecopy.StoreCopyClientTest.storeCopyRequest.spy.new StoreCopyClient.StoreCopyRequester",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type logRotationControlSupplier : LogRotationControl to storeFlusher : StoreFlusher in class org.neo4j.kernel.ha.cluster.DefaultMasterImplSPI",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type recoveryVersion : long to recoveryPosition : LogPosition in method public init() : void from class org.neo4j.kernel.recovery.Recovery",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type highestGapFreeMeta : long to highestGapFreeMeta : long[] in class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private pack(meta long) : long[] renamed to private createResult(number long, meta long[]) : long[] in class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type logRotationControl : LogRotationControl to logRotationControl : StoreFlusher in method public shouldWriteSomeDataIntoTheLog() : void from class org.neo4j.kernel.impl.transaction.log.PhysicalLogFileTest",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type logRotationControl : LogRotationControl to logRotationControl : StoreFlusher in method public shouldReadOlderLogs() : void from class org.neo4j.kernel.impl.transaction.log.PhysicalLogFileTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable buffer : ByteBuffer to writableLogChannel : PhysicalWritableLogChannel in method private writeSomeData(file File, visitor Visitor<Pair<LogEntryWriter,Consumer<LogPositionMarker>>,IOException>) : void in class org.neo4j.kernel.RecoveryTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable recoveredTransactions : AtomicInteger to visitor : FakeRecoveryVisitor in method public shouldOpenAndRecoverExistingData() : void in class org.neo4j.kernel.impl.transaction.log.PhysicalLogicalTransactionStoreTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable recoveredTransactions : AtomicInteger to visitor : FakeRecoveryVisitor in method public shouldExtractMetadataFromExistingTransaction() : void in class org.neo4j.kernel.impl.transaction.log.PhysicalLogicalTransactionStoreTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter database : HighlyAvailableGraphDatabase to db : HighlyAvailableGraphDatabase in method private checkPoint(db HighlyAvailableGraphDatabase) : void in class slavetest.TestInstanceJoin",
    "comment" : "<p><span class='blob-code-inner'><span class='pl-k'>private</span> <span class='pl-smi'>KernelPanicEventGenerator</span> <span class='pl-en'>getKernelPanicGenerator</span>( <span class='pl-smi'>HighlyAvailableGraphDatabase</span> <span class='pl-v'>database</span> )</span> is deleted method and<br /><span class='blob-code-inner'><span class='pl-k'>private</span> <span class='pl-k'>void</span> <span class='pl-en'>checkPoint</span>( <span class='pl-smi'>HighlyAvailableGraphDatabase</span> <span class='pl-v'>db</span> )</span> is newly added method</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type visitor : Visitor<ByteBuffer,IOException> to visitor : Visitor<Pair<LogEntryWriter,Consumer<LogPositionMarker>>,IOException> in method private writeSomeData(file File, visitor Visitor<Pair<LogEntryWriter,Consumer<LogPositionMarker>>,IOException>) : void in class org.neo4j.kernel.RecoveryTest",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type LogVersionedStoreChannel to Iterator<LogVersionedStoreChannel> in method public getLogFiles(fromVersion long) : Iterator<LogVersionedStoreChannel> from class org.neo4j.kernel.recovery.Recovery.SPI",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter recoveryVersion : long to fromVersion : long in method public getLogFiles(fromVersion long) : Iterator<LogVersionedStoreChannel> from class org.neo4j.kernel.recovery.Recovery.SPI",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type LogRotationControl to StoreFlusher in method public storeFlusher() : StoreFlusher in class org.neo4j.kernel.NeoStoreDataSource.TransactionLogModule",
    "comment" : "null",
    "validation" : "CTP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type LogRotationControl to StoreFlusher in method public storeFlusher() : StoreFlusher in class org.neo4j.kernel.NeoStoreDataSource.buildTransactionLogs",
    "comment" : "null",
    "validation" : "CTP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type long to int in method public getVisitedTransactions() : int in class org.neo4j.kernel.impl.transaction.log.PhysicalLogicalTransactionStoreTest.FakeRecoveryVisitor",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Supplier<LogRotationControl> to Supplier<StoreFlusher> in method public storeFlusherSupplier() : Supplier<StoreFlusher> in class org.neo4j.backup.OnlineBackupExtensionFactory.Dependencies",
    "comment" : "null",
    "validation" : "CTP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type log : File to finder : LatestCheckPointFinder in method public recoveryNeededAt(dataDir File, currentLogVersion long) : boolean in class org.neo4j.kernel.impl.recovery.StoreRecoverer",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type entryReader : LogEntryReader<T> to logEntryCursor : LogEntryCursor<T> in class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor",
    "comment" : "<p><span class='blob-code-inner blob-code-marker' data-code-marker=' '><span class='pl-k'>LogEntryCursor wraps LogEntryReader<br /></span></span></p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type channel : StoreChannel to versionedStoreChannel : LogVersionedStoreChannel in method private writeSomeData(file File, visitor Visitor<Pair<LogEntryWriter,Consumer<LogPositionMarker>>,IOException>) : void from class org.neo4j.kernel.RecoveryTest",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type logFile : LogFile to db : GraphDatabaseService in method private createSomeDataAndCrash(store File, fileSystem EphemeralFileSystemAbstraction) : FileSystemAbstraction in class org.neo4j.kernel.impl.recovery.TestStoreRecoverer",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type transaction : PhysicalTransactionRepresentation to snapshot : EphemeralFileSystemAbstraction in method private createSomeDataAndCrash(store File, fileSystem EphemeralFileSystemAbstraction) : FileSystemAbstraction in class org.neo4j.kernel.impl.recovery.TestStoreRecoverer",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type recoveredTransactions : AtomicInteger to visitor : FakeRecoveryVisitor in method public shouldOpenAndRecoverExistingData() : void in class org.neo4j.kernel.impl.transaction.log.PhysicalLogicalTransactionStoreTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type recoveredTransactions : AtomicInteger to visitor : FakeRecoveryVisitor in method public shouldExtractMetadataFromExistingTransaction() : void in class org.neo4j.kernel.impl.transaction.log.PhysicalLogicalTransactionStoreTest",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type transaction : TransactionRepresentation to physicalLogVersionedStoreChannel : PhysicalLogVersionedStoreChannel in method public next() : LogVersionedStoreChannel in class org.neo4j.kernel.impl.transaction.log.PhysicalLogicalTransactionStoreTest.shouldOpenAndRecoverExistingData.life.getLogFiles",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter recoveredLogVersion : long to recoveryPosition : LogPosition in method public recoveryRequired(recoveryPosition LogPosition) : void from class org.neo4j.kernel.recovery.Recovery.Monitor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type recoveredLogVersion : long to recoveryPosition : LogPosition in method public recoveryRequired(recoveryPosition LogPosition) : void from class org.neo4j.kernel.recovery.Recovery.Monitor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public logRotationControlSupplier() : Supplier<LogRotationControl> renamed to public storeFlusherSupplier() : Supplier<StoreFlusher> in class org.neo4j.backup.OnlineBackupExtensionFactory.Dependencies",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public logRotationControl() : LogRotationControl renamed to public storeFlusher() : StoreFlusher in class org.neo4j.kernel.NeoStoreDataSource.TransactionLogModule",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public logRotationControl() : LogRotationControl renamed to public storeFlusher() : StoreFlusher in class org.neo4j.kernel.NeoStoreDataSource.buildTransactionLogs",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logVersion : long in method public transactionCommitted(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.store.NeoStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter byteOffset : long in method public transactionCommitted(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.store.NeoStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logVersion : long in method public setLastCommittedAndClosedTransactionId(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.store.NeoStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter byteOffset : long in method public setLastCommittedAndClosedTransactionId(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.store.NeoStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter lastTxLogVersion : long in method private migrateWithBatchImporter(storeDir File, migrationDir File, lastTxId long, lastTxChecksum long, lastTxLogVersion long, lastTxLogByteOffset long, pageCache PageCache) : void from class org.neo4j.kernel.impl.storemigration.StoreMigrator",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter lastTxLogByteOffset : long in method private migrateWithBatchImporter(storeDir File, migrationDir File, lastTxId long, lastTxChecksum long, lastTxLogVersion long, lastTxLogByteOffset long, pageCache PageCache) : void from class org.neo4j.kernel.impl.storemigration.StoreMigrator",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter lastTxLogVersion : long in method private readAdditionalIds(storeDir File, lastTxId long, lastTxChecksum long, lastTxLogVersion long, lastTxLogByteOffset long) : AdditionalInitialIds from class org.neo4j.kernel.impl.storemigration.StoreMigrator",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter lastTxLogByteOffset : long in method private readAdditionalIds(storeDir File, lastTxId long, lastTxChecksum long, lastTxLogVersion long, lastTxLogByteOffset long) : AdditionalInitialIds from class org.neo4j.kernel.impl.storemigration.StoreMigrator",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter checkPointer : CheckPointer in method public BatchingTransactionAppender(logFile LogFile, logRotation LogRotation, checkPointer CheckPointer, transactionCommitConsumer LongConsumer, transactionMetadataCache TransactionMetadataCache, transactionIdStore TransactionIdStore, legacyIndexTransactionOrdering IdOrderingQueue, kernelHealth KernelHealth) from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppender",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter transactionCommitConsumer : LongConsumer in method public BatchingTransactionAppender(logFile LogFile, logRotation LogRotation, checkPointer CheckPointer, transactionCommitConsumer LongConsumer, transactionMetadataCache TransactionMetadataCache, transactionIdStore TransactionIdStore, legacyIndexTransactionOrdering IdOrderingQueue, kernelHealth KernelHealth) from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppender",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter transactionLogPosition : LogPosition in method package TransactionCommitment(hasLegacyIndexChanges boolean, transactionId long, transactionChecksum long, transactionLogPosition LogPosition, transactionIdStore TransactionIdStore) from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppender.TransactionCommitment",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logVersion : long in method public transactionCommitted(transactionId long, checksum long, logVersion long, logByteOffset long) : void from class org.neo4j.kernel.impl.transaction.log.ReadOnlyTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logByteOffset : long in method public transactionCommitted(transactionId long, checksum long, logVersion long, logByteOffset long) : void from class org.neo4j.kernel.impl.transaction.log.ReadOnlyTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logVersion : long in method public setLastCommittedAndClosedTransactionId(transactionId long, checksum long, logVersion long, logByteOffset long) : void from class org.neo4j.kernel.impl.transaction.log.ReadOnlyTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logByteOffset : long in method public setLastCommittedAndClosedTransactionId(transactionId long, checksum long, logVersion long, logByteOffset long) : void from class org.neo4j.kernel.impl.transaction.log.ReadOnlyTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter initialMeta : long[] in method public ArrayQueueOutOfOrderSequence(startingNumber long, initialArraySize int, initialMeta long[]) from class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter previouslyCommittedTxLogVersion : long in method public DeadSimpleTransactionIdStore(previouslyCommittedTxId long, checksum long, previouslyCommittedTxLogVersion long, previouslyCommittedTxLogByteOffset long) from class org.neo4j.kernel.impl.transaction.DeadSimpleTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter previouslyCommittedTxLogByteOffset : long in method public DeadSimpleTransactionIdStore(previouslyCommittedTxId long, checksum long, previouslyCommittedTxLogVersion long, previouslyCommittedTxLogByteOffset long) from class org.neo4j.kernel.impl.transaction.DeadSimpleTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logVersion : long in method public transactionCommitted(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.transaction.log.TransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter byteOffset : long in method public transactionCommitted(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.transaction.log.TransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logVersion : long in method public setLastCommittedAndClosedTransactionId(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.transaction.log.TransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter byteOffset : long in method public setLastCommittedAndClosedTransactionId(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.transaction.log.TransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter upToLogVersion : long in method public prune(upToLogVersion long) : void from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruneStrategy",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter number : long in method private createResult(number long, meta long[]) : long[] from class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Parameter",
    "description" : "Remove Parameter transactionId : long in method public checkPoint(transactionId long, logPosition LogPosition) : void from class org.neo4j.kernel.impl.transaction.log.TransactionLogWriter",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Parameter",
    "description" : "Remove Parameter transactionId : long in method public writeCheckPointEntry(transactionId long, logPosition LogPosition) : void from class org.neo4j.kernel.impl.transaction.log.entry.LogEntryWriterV1",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Parameter",
    "description" : "Remove Parameter versionRepo : LogVersionRepository in method public fromConfigValue(fileSystem FileSystemAbstraction, logFileInformation LogFileInformation, files PhysicalLogFiles, versionRepo LogVersionRepository, configValue String) : LogPruneStrategy from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruneStrategyFactory",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Parameter",
    "description" : "Remove Parameter versionRepo : LogVersionRepository in method public ThresholdBasedPruneStrategy(fileSystem FileSystemAbstraction, logFileInformation LogFileInformation, files PhysicalLogFiles, versionRepo LogVersionRepository, threshold Threshold) from class org.neo4j.kernel.impl.transaction.log.pruning.ThresholdBasedPruneStrategy",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Parameter",
    "description" : "Remove Parameter logRotationControl : LogRotationControl in method public LogRotationImpl(monitor Monitor, logFile LogFile, logRotationControl LogRotationControl, kernelHealth KernelHealth, logProvider LogProvider) from class org.neo4j.kernel.impl.transaction.log.rotation.LogRotationImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Parameter",
    "description" : "Remove Parameter transactionId : long in method public writeCheckPointEntry(transactionId long, logPosition LogPosition) : void from class org.neo4j.kernel.impl.transaction.log.entry.LogEntryWriter",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method public visit(committedTx CommittedTransactionRepresentation) : boolean from class org.neo4j.kernel.impl.transaction.log.PhysicalLogicalTransactionStoreTest.FakeRecoveryVisitor",
    "comment" : "<p>visit(committedTx CommittedTransactionRepresentation) is a new method in a new class</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Override in method public finishedRotating(currentVersion long) : void from class org.neo4j.kernel.impl.transaction.log.pruning.LogPruning",
    "comment" : "<p>deleted method</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Override in method public visit(buffer ByteBuffer) : boolean from class org.neo4j.kernel.RecoveryTest.shouldRecoverExistingData.writeSomeData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Thrown Exception Type",
    "description" : "Add Thrown Exception Type IOException in method public PhysicalTransactionCursor(channel T, entryReader LogEntryReader<T>) from class org.neo4j.kernel.impl.transaction.log.PhysicalTransactionCursor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to package in method package Position(id int, description String) from class org.neo4j.kernel.impl.store.NeoStore.Position",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier package to public in method public CheckPoint(logPosition LogPosition) from class org.neo4j.kernel.impl.transaction.log.entry.CheckPoint",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier package to public in method public CheckPoint(version byte, logPosition LogPosition) from class org.neo4j.kernel.impl.transaction.log.entry.CheckPoint",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier public to private in method private awaitAllTransactionsClosed() : void from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter byteOffset : long in method public setLastCommittedAndClosedTransactionId(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.transaction.DeadSimpleTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logVersion : long in method public setLastCommittedAndClosedTransactionId(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.transaction.DeadSimpleTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier final in attribute public NO_MORE_CHANNELS : LogVersionBridge from class org.neo4j.kernel.impl.transaction.log.LogVersionBridge",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier static in attribute public NO_MORE_CHANNELS : LogVersionBridge from class org.neo4j.kernel.impl.transaction.log.LogVersionBridge",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier final in attribute public BASE_TX_ID : long from class org.neo4j.kernel.impl.transaction.log.TransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier static in attribute public BASE_TX_ID : long from class org.neo4j.kernel.impl.transaction.log.TransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier final in attribute public BASE_TX_CHECKSUM : long from class org.neo4j.kernel.impl.transaction.log.TransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier static in attribute public BASE_TX_CHECKSUM : long from class org.neo4j.kernel.impl.transaction.log.TransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private logPosition : LogPosition from class org.neo4j.kernel.impl.transaction.log.entry.CheckPoint",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier final in attribute private metaArray : long[] from class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier final in attribute public EMPTY : AdditionalInitialIds from class org.neo4j.unsafe.impl.batchimport.AdditionalInitialIds",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier static in attribute public EMPTY : AdditionalInitialIds from class org.neo4j.unsafe.impl.batchimport.AdditionalInitialIds",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier final in attribute private cursor : PhysicalTransactionCursor<ReadableVersionableLogChannel> from class org.neo4j.kernel.impl.transaction.PhysicalTransactionCursorTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private logFile : LogFile from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private logRotation : LogRotation from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private transactionMetadataCache : TransactionMetadataCache from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private transactionIdStore : TransactionIdStore from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private kernelHealth : KernelHealth from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private channelCommandQueue : BlockingQueue<ChannelCommand> from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private forceSemaphore : Semaphore from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter logVersion : long in method public transactionCommitted(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.transaction.DeadSimpleTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter byteOffset : long in method public transactionCommitted(transactionId long, checksum long, logVersion long, byteOffset long) : void from class org.neo4j.kernel.impl.transaction.DeadSimpleTransactionIdStore",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter Modifier",
    "description" : "Add Parameter Modifier final in parameter recoveryVersion : long in method public shouldOpenAndRecoverExistingData() : void from class org.neo4j.kernel.impl.transaction.log.PhysicalLogicalTransactionStoreTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Class Access Modifier",
    "description" : "Change Class Access Modifier package to public in class org.neo4j.kernel.RecoveryLabelScanWriterProvider",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Class Modifier",
    "description" : "Remove Class Modifier static in class org.neo4j.kernel.impl.store.NeoStore.Position",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Class Modifier",
    "description" : "Remove Class Modifier static in class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest.ChannelCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type meta : long to meta : long[] in method public get() : long[] from class org.neo4j.kernel.impl.util.ArrayQueueOutOfOrderSequence",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Variable",
    "description" : "Extract Variable fileSystemAbstraction : FileSystemAbstraction in method public shouldBeAbleToRecoverBrokenStore() : void from class org.neo4j.kernel.impl.recovery.TestStoreRecoverer",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Variable",
    "description" : "Extract Variable fileSystemAbstraction : FileSystemAbstraction in method public shouldWantToRecoverBrokenStore() : void from class org.neo4j.kernel.impl.recovery.TestStoreRecoverer",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute legacyindexTransactionOrdering : IdOrderingQueue to legacyIndexTransactionOrdering : IdOrderingQueue in class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier final in attribute private legacyIndexTransactionOrdering : IdOrderingQueue from class org.neo4j.kernel.impl.transaction.log.BatchingTransactionAppenderConcurrencyTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Type Declaration Kind",
    "description" : "Change Type Declaration Kind class to interface in type org.neo4j.kernel.impl.transaction.log.pruning.LogPruning",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter endPosition : LogPosition in method public logRecovered(endPosition LogPosition) : void from class org.neo4j.kernel.recovery.Recovery.Monitor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter endPosition : LogPosition in method public logRecovered(endPosition LogPosition) : void from class org.neo4j.kernel.impl.transaction.log.LoggingLogFileMonitor",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Parameter",
    "description" : "Remove Parameter logRotationControl : LogRotationControl in method private buildRecovery(fileSystemAbstraction FileSystemAbstraction, cacheAccess CacheAccessBackDoor, indexingService IndexingService, indexUpdatesValidator IndexUpdatesValidator, labelScanStore LabelScanStore, neoStore NeoStore, recoveryVisitorMonitor RecoveryVisitor.Monitor, recoveryMonitor Recovery.Monitor, logFiles PhysicalLogFiles, logRotationControl LogRotationControl, startupStatistics StartupStatisticsProvider) : void from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter storeFlusher : StoreFlusher in method private buildRecovery(fileSystemAbstraction FileSystemAbstraction, cacheAccess CacheAccessBackDoor, indexingService IndexingService, indexUpdatesValidator IndexUpdatesValidator, labelScanStore LabelScanStore, neoStore NeoStore, recoveryVisitorMonitor RecoveryVisitor.Monitor, recoveryMonitor Recovery.Monitor, logFiles PhysicalLogFiles, storeFlusher StoreFlusher, startupStatistics StartupStatisticsProvider) : void from class org.neo4j.kernel.NeoStoreDataSource",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 11758
}, {
  "id" : 1122454,
  "repository" : "https://github.com/crate/crate.git",
  "sha1" : "5373a852a7e45715e0a6771b7cd56592994c07dd",
  "url" : "https://github.com/crate/crate/commit/5373a852a7e45715e0a6771b7cd56592994c07dd",
  "author" : "Philipp Bogensberger",
  "time" : "6/23/15 10:52 AM",
  "refactorings" : [ {
    "type" : "Push Down Method",
    "description" : "Push Down Method public plan() : Plan from class io.crate.planner.node.dql.ESDQLPlanNode to public plan() : Plan from class io.crate.planner.node.dql.ESGetNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter plannerContext : Planner.Context to jobId : UUID in method public collect(jobId UUID, tableInfo TableInfo, plannerContext Planner.Context, whereClause WhereClause, toCollect List<Symbol>, projections ImmutableList<Projection>) : CollectNode in class io.crate.planner.PlanNodeBuilder",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type plannerContext : Planner.Context to jobId : UUID in method public collect(jobId UUID, tableInfo TableInfo, plannerContext Planner.Context, whereClause WhereClause, toCollect List<Symbol>, projections ImmutableList<Projection>) : CollectNode in class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type INSTANCE : NoopPlan to id : UUID in class io.crate.planner.NoopPlan",
    "comment" : "<p>singleton to property</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type INSTANCE : KillPlan to id : UUID in class io.crate.planner.node.management.KillPlan",
    "comment" : "<p>singleton to property</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public jobId() : UUID extracted from public testStreaming() : void in class io.crate.planner.node.dql.CountNodeTest & moved to class io.crate.planner.node.dql.ESGetNode",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "RMiner-1x",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public IterablePlan(id UUID, nodes PlanNode...) from class io.crate.planner.IterablePlan",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public distributingCollect(jobId UUID, tableInfo TableInfo, plannerContext Planner.Context, whereClause WhereClause, toCollect List<Symbol>, downstreamNodes List<String>, projections ImmutableList<Projection>) : CollectNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public distributedMerge(jobId UUID, collectNode CollectNode, plannerContext Planner.Context, projections List<Projection>) : MergeNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public localMerge(jobId UUID, projections List<Projection>, previousNode DQLPlanNode, plannerContext Planner.Context) : MergeNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public sortedLocalMerge(jobId UUID, projections List<Projection>, orderBy OrderBy, sourceSymbols List<Symbol>, orderBySymbols List<Symbol>, previousNode DQLPlanNode, plannerContext Planner.Context) : MergeNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public collect(jobId UUID, tableInfo TableInfo, plannerContext Planner.Context, whereClause WhereClause, toCollect List<Symbol>, projections ImmutableList<Projection>, partitionIdent String, routingPreference String, orderBy OrderBy, limit Integer) : CollectNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public collect(jobId UUID, tableInfo TableInfo, plannerContext Planner.Context, whereClause WhereClause, toCollect List<Symbol>, projections ImmutableList<Projection>) : CollectNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public collect(jobId UUID, tableInfo TableInfo, plannerContext Planner.Context, whereClause WhereClause, toCollect List<Symbol>, projections ImmutableList<Projection>, partitionIdent String, routingPreference String) : CollectNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public collect(jobId UUID, tableInfo TableInfo, plannerContext Planner.Context, whereClause WhereClause, toCollect List<Symbol>, projections ImmutableList<Projection>, partitionIdent String) : CollectNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public collect(jobId UUID, tableInfo TableInfo, plannerContext Planner.Context, whereClause WhereClause, toCollect List<Symbol>, projections ImmutableList<Projection>, orderBy OrderBy, limit Integer) : CollectNode from class io.crate.planner.PlanNodeBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public NoopPlannedAnalyzedRelation(relation AnalyzedRelation, id UUID) from class io.crate.planner.node.NoopPlannedAnalyzedRelation",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public InsertFromSubQuery(innerPlan Plan, handlerMergeNode MergeNode, id UUID) from class io.crate.planner.node.dml.InsertFromSubQuery",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public Upsert(nodes List<Plan>, id UUID) from class io.crate.planner.node.dml.Upsert",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method protected AbstractDQLPlanNode(jobId UUID, executionNodeId int, name String) from class io.crate.planner.node.dql.AbstractDQLPlanNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public CollectAndMerge(collectNode CollectNode, localMergeNode MergeNode, id UUID) from class io.crate.planner.node.dql.CollectAndMerge",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public CollectNode(jobId UUID, executionNodeId int, name String) from class io.crate.planner.node.dql.CollectNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public CollectNode(jobId UUID, executionNodeId int, name String, routing Routing) from class io.crate.planner.node.dql.CollectNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public CollectNode(jobId UUID, executionNodeId int, name String, routing Routing, toCollect List<Symbol>, projections List<Projection>) from class io.crate.planner.node.dql.CollectNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public CountNode(jobId UUID, executionNodeId int, routing Routing, whereClause WhereClause) from class io.crate.planner.node.dql.CountNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public CountPlan(countNode CountNode, mergeNode MergeNode, id UUID) from class io.crate.planner.node.dql.CountPlan",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public DistributedGroupBy(collectNode CollectNode, reducerMergeNode MergeNode, localMergeNode MergeNode, id UUID) from class io.crate.planner.node.dql.DistributedGroupBy",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public ESGetNode(executionNodeId int, tableInfo TableInfo, querySpec QuerySpec, jobId UUID) from class io.crate.planner.node.dql.ESGetNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public FileUriCollectNode(jobId UUID, executionNodeId int, name String, routing Routing, targetUri Symbol, toCollect List<Symbol>, projections List<Projection>, compression String, sharedStorage Boolean) from class io.crate.planner.node.dql.FileUriCollectNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public GlobalAggregate(collectNode CollectNode, mergeNode MergeNode, id UUID) from class io.crate.planner.node.dql.GlobalAggregate",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public MergeNode(jobId UUID, executionNodeId int, name String, numUpstreams int) from class io.crate.planner.node.dql.MergeNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter jobId : UUID in method public sortedMergeNode(jobId UUID, executionNodeId int, name String, numUpstreams int, orderByIndices int[], reverseFlags boolean[], nullsFirst Boolean[]) : MergeNode from class io.crate.planner.node.dql.MergeNode",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public NonDistributedGroupBy(collectNode CollectNode, localMergeNode MergeNode, id UUID) from class io.crate.planner.node.dql.NonDistributedGroupBy",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public QueryAndFetch(collectNode CollectNode, localMergeNode MergeNode, id UUID) from class io.crate.planner.node.dql.QueryAndFetch",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public QueryThenFetch(collectNode CollectNode, mergeNode MergeNode, id UUID) from class io.crate.planner.node.dql.QueryThenFetch",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public KillPlan(id UUID) from class io.crate.planner.node.management.KillPlan",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter id : UUID in method public NoopPlan(id UUID) from class io.crate.planner.NoopPlan",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to public in method public KillPlan(id UUID) from class io.crate.planner.node.management.KillPlan",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to public in method public NoopPlan(id UUID) from class io.crate.planner.NoopPlan",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 0
}, {
  "id" : 1132974,
  "repository" : "https://github.com/hazelcast/hazelcast.git",
  "sha1" : "c00275e7f85c8a9af5785f66cc0f75dc027b6cb6",
  "url" : "https://github.com/hazelcast/hazelcast/commit/c00275e7f85c8a9af5785f66cc0f75dc027b6cb6",
  "author" : "mustafaiman",
  "time" : "7/6/15 5:59 AM",
  "refactorings" : [ {
    "type" : "Push Down Method",
    "description" : "Push Down Method protected getConnection() : HazelcastConnection from class com.hazelcast.jca.AbstractDeploymentTest to protected getConnection() : HazelcastConnection from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public Init() : void renamed to public init() : void in class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute protected connectionFactory : HazelcastConnectionFactory from class com.hazelcast.jca.AbstractDeploymentTest to private connectionFactory : HazelcastConnectionFactory from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute protected connectionFactory : HazelcastConnectionFactory from class com.hazelcast.jca.AbstractDeploymentTest to private connectionFactory : HazelcastConnectionFactory from class com.hazelcast.jca.ConnectionFactoryImplTest",
    "comment" : "Matin: FP",
    "validation" : "FP",
    "detectionTools" : "RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public deploymentHzRar() : ResourceAdapterArchive renamed to public createResourceAdapterDeployment() : ResourceAdapterArchive in class com.hazelcast.jca.AbstractDeploymentTest",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @BeforeClass in method public init() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @InSequence(2) in method public testTransactionCommit() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Ignore in method public testTransactionCommit() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @InSequence(1) in method public testTransactionRollback() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Ignore in method public testTransactionRollback() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Before in method public Init() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Annotation",
    "description" : "Remove Attribute Annotation @Resource(mappedName = \"java:jboss/UserTransaction\") in attribute private userTx : UserTransaction from class com.hazelcast.jca.XATransactionTest",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Annotation",
    "description" : "Remove Attribute Annotation @Resource(mappedName = \"java:jboss/datasources/ExampleDS\") in attribute protected h2Datasource : DataSource from class com.hazelcast.jca.XATransactionTest",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Class Annotation",
    "description" : "Add Class Annotation @RunWith(Arquillian.class) in class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Class Annotation",
    "description" : "Add Class Annotation @Category(SlowTest.class) in class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Class Annotation",
    "description" : "Remove Class Annotation @Ignore in class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Thrown Exception Type",
    "description" : "Add Thrown Exception Type NamingException in method public init() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to protected in method protected doSql() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to protected in method protected validateSQLdata(hasdata boolean) : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier package to private in attribute private connection : HazelcastConnection from class com.hazelcast.jca.XATestWithJCA",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier package to private in attribute private instance : HazelcastInstance from class com.hazelcast.jca.XATestWithJCA",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier protected to private in attribute private h2Datasource : DataSource from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier protected to private in attribute private connectionFactory : HazelcastConnectionFactory from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Annotation",
    "description" : "Remove Attribute Annotation @Resource(mappedName = \"java:/HazelcastCF\") in attribute protected connectionFactory : HazelcastConnectionFactory from class com.hazelcast.jca.AbstractDeploymentTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Modifier",
    "description" : "Add Method Modifier static in method public init() : void from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier static in attribute private userTx : UserTransaction from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier static in attribute private h2Datasource : DataSource from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Attribute Modifier",
    "description" : "Add Attribute Modifier static in attribute private connectionFactory : HazelcastConnectionFactory from class com.hazelcast.jca.XATransactionTest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 2426
}, {
  "id" : 1134188,
  "repository" : "https://github.com/gradle/gradle.git",
  "sha1" : "b1fb1192daa1647b0bd525600dd41063765eca70",
  "url" : "https://github.com/gradle/gradle/commit/b1fb1192daa1647b0bd525600dd41063765eca70",
  "author" : "Benjamin Muschko",
  "time" : "7/6/15 10:08 AM",
  "refactorings" : [ {
    "type" : "Push Down Method",
    "description" : "Push Down Method public setGradleUserHomeDir(gradleUserHomeDir File) : void from class org.gradle.testkit.functional.GradleRunner to public setGradleUserHomeDir(gradleUserHomeDir File) : void from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private gradleUserHomeDir : File from class org.gradle.testkit.functional.GradleRunner to private gradleUserHomeDir : File from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getTasks() : List<String> from class org.gradle.testkit.functional.GradleRunner to public getTasks() : List<String> from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private arguments : List<String> from class org.gradle.testkit.functional.GradleRunner to private arguments : List<String> from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private taskNames : List<String> from class org.gradle.testkit.functional.GradleRunner to private taskNames : List<String> from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public setArguments(arguments List<String>) : void from class org.gradle.testkit.functional.GradleRunner to public setArguments(arguments List<String>) : void from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private workingDirectory : File from class org.gradle.testkit.functional.GradleRunner to private workingDirectory : File from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getGradleUserHomeDir() : File from class org.gradle.testkit.functional.GradleRunner to public getGradleUserHomeDir() : File from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public setWorkingDir(workingDirectory File) : void from class org.gradle.testkit.functional.GradleRunner to public setWorkingDir(workingDirectory File) : void from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getArguments() : List<String> from class org.gradle.testkit.functional.GradleRunner to public getArguments() : List<String> from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public setTasks(taskNames List<String>) : void from class org.gradle.testkit.functional.GradleRunner to public setTasks(taskNames List<String>) : void from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getWorkingDir() : File from class org.gradle.testkit.functional.GradleRunner to public getWorkingDir() : File from class org.gradle.testkit.functional.internal.DefaultGradleRunner",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 3286
}, {
  "id" : 1135559,
  "repository" : "https://github.com/tomahawk-player/tomahawk-android.git",
  "sha1" : "56c273ee11296288cb15320c3de781b94a1e8eb4",
  "url" : "https://github.com/tomahawk-player/tomahawk-android/commit/56c273ee11296288cb15320c3de781b94a1e8eb4",
  "author" : "Enno Gottschalk",
  "time" : "7/7/15 10:44 PM",
  "refactorings" : [ {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getAlbumTimeStamps() : ConcurrentHashMap<Album,Long> from class org.tomahawk.libtomahawk.collection.NativeCollection to public getAlbumTimeStamps() : ConcurrentHashMap<Album,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Attribute",
    "description" : "Pull Up Attribute protected mAlbumTracks : ConcurrentHashMap<Album,Set<Query>> from class org.tomahawk.libtomahawk.collection.NativeCollection to protected mAlbumTracks : ConcurrentHashMap<Album,Set<Query>> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method public wipe() : void from class org.tomahawk.libtomahawk.collection.NativeCollection to public wipe() : void from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Attribute",
    "description" : "Pull Up Attribute protected mQueries : Set<Query> from class org.tomahawk.libtomahawk.collection.NativeCollection to protected mQueries : Set<Query> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Attribute",
    "description" : "Pull Up Attribute protected mArtists : Set<Artist> from class org.tomahawk.libtomahawk.collection.NativeCollection to protected mArtists : Set<Artist> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getArtistTimeStamps() : ConcurrentHashMap<Artist,Long> from class org.tomahawk.libtomahawk.collection.NativeCollection to public getArtistTimeStamps() : ConcurrentHashMap<Artist,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute protected mArtistTimeStamps : ConcurrentHashMap<Artist,Long> from class org.tomahawk.libtomahawk.collection.NativeCollection to private mArtistTimeStamps : ConcurrentHashMap<Artist,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public addQuery(query Query, addedTimeStamp long) : void from class org.tomahawk.libtomahawk.collection.NativeCollection to public addQuery(query Query, addedTimeStamp long) : void from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getQueryTimeStamps() : ConcurrentHashMap<Query,Long> from class org.tomahawk.libtomahawk.collection.NativeCollection to public getQueryTimeStamps() : ConcurrentHashMap<Query,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Attribute",
    "description" : "Pull Up Attribute protected mAlbumArtists : Set<Artist> from class org.tomahawk.libtomahawk.collection.NativeCollection to protected mAlbumArtists : Set<Artist> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute protected mQueryTimeStamps : ConcurrentHashMap<Query,Long> from class org.tomahawk.libtomahawk.collection.NativeCollection to private mQueryTimeStamps : ConcurrentHashMap<Query,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Attribute",
    "description" : "Pull Up Attribute protected mAlbums : Set<Album> from class org.tomahawk.libtomahawk.collection.NativeCollection to protected mAlbums : Set<Album> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute protected mAlbumTimeStamps : ConcurrentHashMap<Album,Long> from class org.tomahawk.libtomahawk.collection.NativeCollection to private mAlbumTimeStamps : ConcurrentHashMap<Album,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Attribute",
    "description" : "Pull Up Attribute protected mArtistAlbums : ConcurrentHashMap<Artist,Set<Album>> from class org.tomahawk.libtomahawk.collection.NativeCollection to protected mArtistAlbums : ConcurrentHashMap<Artist,Set<Album>> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move And Rename Attribute",
    "description" : "Move And Rename Attribute private mCachedAlbumArtists : Set<Artist> renamed to protected mAlbumArtists : Set<Artist> and moved from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection to class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move And Rename Attribute",
    "description" : "Move And Rename Attribute private mCachedQueries : Set<Query> renamed to protected mQueries : Set<Query> and moved from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection to class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move And Rename Attribute",
    "description" : "Move And Rename Attribute private mCachedArtists : Set<Artist> renamed to protected mArtists : Set<Artist> and moved from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection to class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move And Rename Attribute",
    "description" : "Move And Rename Attribute private mCachedAlbums : Set<Album> renamed to protected mAlbums : Set<Album> and moved from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection to class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Promise<List<Album>,Throwable,Void> to Promise<Set<Album>,Throwable,Void> in method public getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.NativeCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Promise<List<Query>,Throwable,Void> to Promise<Set<Query>,Throwable,Void> in method public getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.NativeCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Promise<List<Album>,Throwable,Void> to Promise<Set<Album>,Throwable,Void> in method public getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Promise<List<Query>,Throwable,Void> to Promise<Set<Query>,Throwable,Void> in method public getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Promise<List<Album>,Throwable,Void> to Promise<Set<Album>,Throwable,Void> in method public abstract getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Promise<List<Query>,Throwable,Void> to Promise<Set<Query>,Throwable,Void> in method public abstract getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter addedTimeStamp : long to onlyIfCached : boolean in method public getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> in class org.tomahawk.libtomahawk.collection.NativeCollection",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type albums : List<Album> to albums : Set<Album> in method public onReportResults(results JsonArray) : void from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection.getArtistAlbums.done.new DoneCallback<ScriptResolverCollectionMetaData>.onDone.start.new ScriptJob.ResultsArrayCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type deferred : Deferred<List<Album>,Throwable,Void> to deferred : Deferred<Set<Album>,Throwable,Void> in method public getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type queries : List<Query> to queries : Set<Query> in method public onReportResults(results JsonArray) : void from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection.getAlbumTracks.done.new DoneCallback<ScriptResolverCollectionMetaData>.onDone.start.new ScriptJob.ResultsArrayCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type deferred : Deferred<List<Query>,Throwable,Void> to deferred : Deferred<Set<Query>,Throwable,Void> in method public getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type addedTimeStamp : long to onlyIfCached : boolean in method public getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> in class org.tomahawk.libtomahawk.collection.NativeCollection",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type result : List<Query> to result : Set<Query> in method public onDone(result Set<Query>) : void from class org.tomahawk.tomahawk_android.adapters.ViewHolder.fillView.done.new DoneCallback<Set<Query>>",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type result : List<Album> to result : Set<Album> in method public onDone(result Set<Album>) : void from class org.tomahawk.tomahawk_android.fragments.AlbumsFragment.updateAdapter.done.new DoneCallback<Set<Album>>",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type result : List<Query> to result : Set<Query> in method public onDone(result Set<Query>) : void from class org.tomahawk.tomahawk_android.fragments.ContextMenuFragment.setupContextMenuItems.setOnClickListener.new View.OnClickListener.onClick.done.new DoneCallback<Set<Query>>",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Promise<Boolean,Throwable,Void> to Promise<Set<Query>,Throwable,Void> in method public getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> in class org.tomahawk.libtomahawk.collection.NativeCollection",
    "comment" : "<p><span class='blob-code-inner blob-code-marker' data-code-marker='-'><span class='pl-k'>Promise&lt;List&lt;<span class='pl-smi'>Query</span>&gt;, <span class='pl-smi'>Throwable</span>, <span class='pl-smi'>Void</span>&gt;</span></span> -&gt; <span class='blob-code-inner blob-code-marker' data-code-marker=' '><span class='pl-k'>Promise&lt;Set&lt;<span class='pl-smi'>Query</span>&gt;, <span class='pl-smi'>Throwable</span>, <span class='pl-smi'>Void</span>&gt;</span></span></p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public hasArtistAlbums(artist Artist) : Promise<Boolean,Throwable,Void> renamed to public getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> in class org.tomahawk.libtomahawk.collection.NativeCollection",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter onlyIfCached : boolean in method public getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.NativeCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter onlyIfCached : boolean in method public getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.NativeCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter onlyIfCached : boolean in method public getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter onlyIfCached : boolean in method public getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.ScriptResolverCollection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter onlyIfCached : boolean in method public abstract getArtistAlbums(artist Artist, onlyIfCached boolean) : Promise<Set<Album>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter onlyIfCached : boolean in method public abstract getAlbumTracks(album Album, onlyIfCached boolean) : Promise<Set<Query>,Throwable,Void> from class org.tomahawk.libtomahawk.collection.Collection",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier protected to private in attribute private mQueryTimeStamps : ConcurrentHashMap<Query,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier protected to private in attribute private mArtistTimeStamps : ConcurrentHashMap<Artist,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier protected to private in attribute private mAlbumTimeStamps : ConcurrentHashMap<Album,Long> from class org.tomahawk.libtomahawk.collection.UserCollection",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type albums : List<Album> to albums : Set<Album> in method public call() : Set<Album> from class org.tomahawk.libtomahawk.collection.NativeCollection.getArtistAlbums.when.new Callable<Set<Album>>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type queries : List<Query> to queries : Set<Query> in method public call() : Set<Query> from class org.tomahawk.libtomahawk.collection.NativeCollection.getAlbumTracks.when.new Callable<Set<Query>>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type List<Album> to Set<Album> in method public call() : Set<Album> from class org.tomahawk.libtomahawk.collection.NativeCollection.getArtistAlbums.when.new Callable<Set<Album>>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type List<Query> to Set<Query> in method public call() : Set<Query> from class org.tomahawk.libtomahawk.collection.NativeCollection.getAlbumTracks.when.new Callable<Set<Query>>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type result : Boolean to result : Set<Query> in method public onDone(result Set<Query>) : void from class org.tomahawk.tomahawk_android.fragments.AlbumsFragment.onItemClick.done.new DoneCallback<Set<Query>>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type result : Boolean to result : Set<Album> in method public onDone(result Set<Album>) : void from class org.tomahawk.tomahawk_android.fragments.ArtistsFragment.onItemClick.done.new DoneCallback<Set<Album>>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type result : Boolean to result : Set<Query> in method public onDone(result Set<Query>) : void from class org.tomahawk.tomahawk_android.fragments.UserCollectionFragment.onItemClick.done.new DoneCallback<Set<Query>>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Localize Parameter",
    "description" : "Localize Parameter queries : List<Query> to sortedQueries : List<Query> in method public onDone(queries Set<Query>) : void from class org.tomahawk.tomahawk_android.fragments.TracksFragment.updateAdapter.done.new DoneCallback<Set<Query>>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 1144
}, {
  "id" : 1141428,
  "repository" : "https://github.com/linkedin/rest.li.git",
  "sha1" : "ec5ea36faa3dd74585bb339beabdba6149ed63be",
  "url" : "https://github.com/linkedin/rest.li/commit/ec5ea36faa3dd74585bb339beabdba6149ed63be",
  "author" : "Erluo Li",
  "time" : "7/14/15 1:26 PM",
  "refactorings" : [ {
    "type" : "Extract Method",
    "description" : "Extract Method private buildErrorResponse(result RestLiServiceException, errorResponseFormat ErrorResponseFormat) : ErrorResponse extracted from public buildErrorResponse(result RestLiServiceException) : ErrorResponse in class com.linkedin.restli.internal.server.methods.response.ErrorResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "0",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "According to the argumentization, this refactoring is not pure. The value of the -errorResponseFormat' can be different from the source method."
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getAugmentedRestLiResponseData() : AugmentedRestLiResponseData renamed to public getRestLiResponseEnvelope() : RestLiResponseEnvelope in class com.linkedin.restli.internal.server.RestLiCallback.FilterResponseContextAdapter",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public setAugmentedRestLiResponseData(data AugmentedRestLiResponseData) : void renamed to public setRestLiResponseEnvelope(data RestLiResponseEnvelope) : void in class com.linkedin.restli.internal.server.RestLiCallback.FilterResponseContextAdapter",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method public getCollectionResponseCustomMetadata() : RecordTemplate from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to public getCollectionResponseCustomMetadata() : RecordTemplate from class com.linkedin.restli.internal.server.response.CollectionResponseEnvelope",
    "comment" : "<p>Push Down Method to CollectionResponseEnvelope</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff, RD-1x",
    "validators" : "Matin, Davood, Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method public getHeaders() : Map<String,String> from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to public getHeaders() : Map<String,String> from class com.linkedin.restli.internal.server.RestLiResponseEnvelope",
    "comment" : "<p>Looking at the usages, this is a clear rename class in my opinion: AugmentedRestLiResponseData to RestLiResponseEnvelope</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff, RD-1x",
    "validators" : "Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method public fromMethodType(type ResourceMethod) : ResponseType from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData.ResponseType to public fromMethodType(type ResourceMethod) : ResponseType from class com.linkedin.restli.internal.server.ResponseType",
    "comment" : "<p>Inner type com.linkedin.restli.internal.server.AugmentedRestLiResponseData.ResponseType was moved to its own file and was extensively modified<br />but the parent type has been renamed<br />Rename Class com.linkedin.restli.internal.server.AugmentedRestLiResponseData renamed to com.linkedin.restli.internal.server.RestLiResponseEnvelope</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff, RD-1x",
    "validators" : "Matin, Davood, Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public hasOverridingErrorResponseFormat() : boolean extracted from public buildErrorResponse(result RestLiServiceException) : ErrorResponse in class com.linkedin.restli.internal.server.methods.response.ErrorResponseBuilder & moved to class com.linkedin.restli.server.RestLiServiceException",
    "comment" : "<p>Extract Method private buildErrorResponse(result RestLiServiceException, errorResponseFormat ErrorResponseFormat) : ErrorResponse extracted from public buildErrorResponse(result RestLiServiceException) : ErrorResponse in class com.linkedin.restli.internal.server.methods.response.ErrorResponseBuilder<br />The original method delegates to the extracted one:<br /><span class='blob-code-inner blob-code-marker' data-code-marker=' '><span class='pl-k'>return</span> buildErrorResponse(result, result<span class='pl-k'>.</span>hasOverridingErrorResponseFormat() <span class='pl-k'>?</span> result<span class='pl-k'>.</span>getOverridingFormat() <span class='pl-k'>:</span> _errorResponseFormat);<br />The second argument is new code.<br /></span></p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff, RD-1x, RD-2x",
    "validators" : "Matin, Laleh, Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move And Inline Method",
    "description" : "Move And Inline Method package populateErrors(serviceErrors Map<K,RestLiServiceException>, routingResult RoutingResult, builder ErrorResponseBuilder) : Map<K,ErrorResponse> moved from class com.linkedin.restli.internal.server.methods.response.BatchResponseUtil to class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder & inlined to public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope",
    "comment" : "<p>The method is moved and inlined from deleted class BatchResponseUtil</p>",
    "validation" : "TP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh, Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move And Inline Method",
    "description" : "Move And Inline Method package populateErrors(serviceErrors Map<K,RestLiServiceException>, routingResult RoutingResult, builder ErrorResponseBuilder) : Map<K,ErrorResponse> moved from class com.linkedin.restli.internal.server.methods.response.BatchResponseUtil to class com.linkedin.restli.internal.server.methods.response.BatchGetResponseBuilder & inlined to public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope",
    "comment" : "<p>The method is moved and inlined from deleted class BatchResponseUtil</p>",
    "validation" : "TP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh, Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private _headers : Map<String,String> from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to private _headers : Map<String,String> from class com.linkedin.restli.internal.server.RestLiResponseEnvelope",
    "comment" : "<p>Same as 2762</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff, RD-1x",
    "validators" : "Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private _status : HttpStatus from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to private _status : HttpStatus from class com.linkedin.restli.internal.server.RestLiResponseEnvelope",
    "comment" : "<p>Same as 2762</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff, RD-1x",
    "validators" : "Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute private _collectionResponseCustomMetadata : RecordTemplate from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to private _collectionResponseCustomMetadata : RecordTemplate from class com.linkedin.restli.internal.server.response.CollectionResponseEnvelope",
    "comment" : "<p>Push Down Attribute to CollectionResponseEnvelope</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff, RD-1x",
    "validators" : "Matin, Davood, Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable statuses : List<CreateIdStatus<Object>> to collectionCreateList : List<CreateCollectionResponseEnvelope.CollectionCreateResponseItem> in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchCreateResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public setAugmentedRestLiResponseData(data AugmentedRestLiResponseData) : void renamed to public setRestLiResponseEnvelope(data RestLiResponseEnvelope) : void in class com.linkedin.restli.internal.server.filter.FilterResponseContextInternal",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff, RD-2x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getAugmentedRestLiResponseData() : AugmentedRestLiResponseData renamed to public getRestLiResponseEnvelope() : RestLiResponseEnvelope in class com.linkedin.restli.internal.server.filter.FilterResponseContextInternal",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff, RD-2x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method private invokeFiltersAndProcessResults(executionReport RequestExecutionReport, responseData RestLiResponseEnvelope, appEx Throwable) : void from class com.linkedin.restli.internal.server.RestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type response : AugmentedRestLiResponseData to response : RestLiResponseEnvelope in method public FilterResponseContextAdapter(response RestLiResponseEnvelope) from class com.linkedin.restli.internal.server.RestLiCallback.FilterResponseContextAdapter",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type data : AugmentedRestLiResponseData to data : RestLiResponseEnvelope in method public setRestLiResponseEnvelope(data RestLiResponseEnvelope) : void from class com.linkedin.restli.internal.server.RestLiCallback.FilterResponseContextAdapter",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildPartialResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.RestLiResponseHandler",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.ActionResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.BatchGetResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.CollectionResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.CreateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.ErrorResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.GetResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.UpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method private checkResponseData(responseData RestLiResponseEnvelope, status HttpStatus, numHeaders int, hasError boolean, hasEntity boolean, errorResponseHeaderName String) : void from class com.linkedin.restli.server.test.TestRestLiResponseHandler",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type data : AugmentedRestLiResponseData to data : RestLiResponseEnvelope in method public setRestLiResponseEnvelope(data RestLiResponseEnvelope) : void from class com.linkedin.restli.internal.server.filter.FilterResponseContextInternal",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.RestLiResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method package convertExceptionToRestLiResponseData(e Throwable) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.RestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public getRestLiResponseEnvelope() : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.RestLiCallback.FilterResponseContextAdapter",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, responseObject Object) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.RestLiResponseHandler",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildExceptionResponseData(request RestRequest, routingResult RoutingResult, object Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.RestLiResponseHandler",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.ActionResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchCreateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchGetResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, object Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.CollectionResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method private buildRestLiResponseData(request RestRequest, routingResult RoutingResult, elements List<? extends RecordTemplate>, pageIncrement PageIncrement, customMetadata RecordTemplate, totalResults Integer, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.CollectionResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.CreateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, object Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.ErrorResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.GetResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.RestLiResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.UpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type AugmentedRestLiResponseData to RestLiResponseEnvelope in method public getRestLiResponseEnvelope() : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.filter.FilterResponseContextInternal",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type statuses : List<CreateIdStatus<Object>> to collectionCreateList : List<CreateCollectionResponseEnvelope.CollectionCreateResponseItem> in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchCreateResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public onSuccess(result T, executionReport RequestExecutionReport) : void from class com.linkedin.restli.internal.server.RestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public onError(e Throwable, executionReport RequestExecutionReport) : void from class com.linkedin.restli.internal.server.RestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type _responseData : AugmentedRestLiResponseData to _responseData : RestLiResponseEnvelope in class com.linkedin.restli.internal.server.RestLiCallback.FilterResponseContextAdapter",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type resultData : AugmentedRestLiResponseData to resultData : RestLiResponseEnvelope in method public testConvertExceptionToRestLiResponseData(e Exception, status HttpStatus) : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder(result Object, httpStatus HttpStatus, returnValue long) : void from class com.linkedin.restli.internal.server.methods.response.TestActionResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder() : void from class com.linkedin.restli.internal.server.methods.response.TestBatchCreateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder(results Object, protocolVersion ProtocolVersion, expectedTransformedResult Map<String,Foo>, expectedErrors Map<String,ErrorResponse>, expectedExceptionsWithUntypedKey Map<Object,RestLiServiceException>, maskTree MaskTree, projectionMode ProjectionMode) : void from class com.linkedin.restli.internal.server.methods.response.TestBatchGetResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public unsupportedNullKeyMapTest(results Object, protocolVersion ProtocolVersion, expectedTransformedResult Map<String,Foo>) : void from class com.linkedin.restli.internal.server.methods.response.TestBatchGetResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder(results Object, protocolVersion ProtocolVersion, expectedResults Map<String,UpdateStatus>, expectedErrors Map<String,ErrorResponse>) : void from class com.linkedin.restli.internal.server.methods.response.TestBatchUpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public unsupportedNullKeyMapTest(results Object, protocolVersion ProtocolVersion, expectedResults Map<String,UpdateStatus>) : void from class com.linkedin.restli.internal.server.methods.response.TestBatchUpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder(results Object, expectedMetadata DataMap, expectedElements List<Foo>, expectedPaging CollectionMetadata, dataMaskTree MaskTree, metaDataMaskTree MaskTree, pagingMaskTree MaskTree, dataProjectionMode ProjectionMode, metadataProjectionMode ProjectionMode) : void from class com.linkedin.restli.internal.server.methods.response.TestCollectionResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder(protocolVersion ProtocolVersion, location String, id String) : void from class com.linkedin.restli.internal.server.methods.response.TestCreateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder(protocolVersion ProtocolVersion) : void from class com.linkedin.restli.internal.server.methods.response.TestErrorResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder(record Object, expectedHttpStatus HttpStatus, maskTree MaskTree, projectionMode ProjectionMode) : void from class com.linkedin.restli.internal.server.methods.response.TestGetResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testBuilder() : void from class com.linkedin.restli.internal.server.methods.response.TestUpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testRestLiResponseData(acceptTypeData AcceptTypeData, response1 String, response2 String, protocolVersion ProtocolVersion, errorResponseHeaderName String) : void from class com.linkedin.restli.server.test.TestRestLiResponseHandler",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type entry : Map.Entry<?,? extends RecordTemplate> to entry : Map.Entry<?,? extends BatchResponseEnvelope.BatchResponseEntry> in method public onResponse(requestContext FilterRequestContext, responseContext FilterResponseContext) : void from class com.linkedin.restli.server.validation.RestLiOutputValidationFilter",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type RecordTemplate to HttpStatus in method public getStatus() : HttpStatus in class com.linkedin.restli.server.RestLiResponseData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type CollectionMetadata to CollectionResponseEnvelope in method public getCollectionResponseEnvelope() : CollectionResponseEnvelope in class com.linkedin.restli.server.RestLiResponseData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type RecordTemplate to BatchResponseEnvelope in method public getBatchResponseEnvelope() : BatchResponseEnvelope in class com.linkedin.restli.server.RestLiResponseData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type mergedKeys : Set<Object> to batchResult : Map<Object,BatchResponseEntry> in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope in class com.linkedin.restli.internal.server.methods.response.BatchGetResponseBuilder",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type errors : Map<Object,ErrorResponse> to entityResponse : EntityResponse<RecordTemplate> in method private buildEntityResponse(routingResult RoutingResult, mergedResponse Map<Object,BatchResponseEntry>) : Map<Object,EntityResponse<RecordTemplate>> in class com.linkedin.restli.internal.server.methods.response.BatchGetResponseBuilder",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testOnSuccessNoFilters() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos, Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testOnErrorRestLiServiceExceptionNoFilters() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testOnErrorOtherExceptionNoFilters(ex Exception) : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type appResponseData : AugmentedRestLiResponseData to appResponseData : RestLiResponseEnvelope in method public testOnSuccessWithFiltersSuccessful() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type appResponseData : AugmentedRestLiResponseData to appResponseData : RestLiResponseEnvelope in method public testOnSuccessWithFiltersExceptionFromFirstFilterSecondFilterHandlesEx() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseErrorData : AugmentedRestLiResponseData to responseErrorData : RestLiResponseEnvelope in method public testOnSuccessWithFiltersExceptionFromFirstFilterSecondFilterHandlesEx() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type appResponseData : AugmentedRestLiResponseData to appResponseData : RestLiResponseEnvelope in method public testOnSuccessWithFiltersExceptionFromFirstFilterSecondFilterDoesNotHandleEx() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseErrorData : AugmentedRestLiResponseData to responseErrorData : RestLiResponseEnvelope in method public testOnSuccessWithFiltersExceptionFromFirstFilterSecondFilterDoesNotHandleEx() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type appResponseData : AugmentedRestLiResponseData to appResponseData : RestLiResponseEnvelope in method public testOnSuccessWithFiltersExceptionFromSecondFilter() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type filterResponseData : AugmentedRestLiResponseData to filterResponseData : RestLiResponseEnvelope in method public testOnSuccessWithFiltersExceptionFromSecondFilter() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testOnErrorWithFiltersNotHandlingAppEx() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "<p>A lot of TP in this commit!</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testOnErrorWithFiltersSuccessfulyHandlingAppEx() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseAppData : AugmentedRestLiResponseData to responseAppData : RestLiResponseEnvelope in method public testOnErrorWithFiltersExceptionFromFirstFilterSecondFilterDoesNotHandle() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseFilterData : AugmentedRestLiResponseData to responseFilterData : RestLiResponseEnvelope in method public testOnErrorWithFiltersExceptionFromFirstFilterSecondFilterDoesNotHandle() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseAppData : AugmentedRestLiResponseData to responseAppData : RestLiResponseEnvelope in method public testOnErrorWithFiltersExceptionFromFirstFilterSecondFilterHandles(resourceMethod ResourceMethod, entityFromFilter2 Object) : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseFilterData : AugmentedRestLiResponseData to responseFilterData : RestLiResponseEnvelope in method public testOnErrorWithFiltersExceptionFromFirstFilterSecondFilterHandles(resourceMethod ResourceMethod, entityFromFilter2 Object) : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseAppData : AugmentedRestLiResponseData to responseAppData : RestLiResponseEnvelope in method public testOnErrorWithFiltersExceptionFromSecondFilter() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseFilterData : AugmentedRestLiResponseData to responseFilterData : RestLiResponseEnvelope in method public testOnErrorWithFiltersExceptionFromSecondFilter() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testFilterResponseContextAdapter() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type updatedResponseData : AugmentedRestLiResponseData to updatedResponseData : RestLiResponseEnvelope in method public testFilterResponseContextAdapter() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public testConvertExceptionToRestLiResponseData(e Exception, status HttpStatus) : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type mergedResults : Map<Object,UpdateStatus> to batchResponseMap : Map<Object,BatchResponseEntry> in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable mergedResults : Map<Object,UpdateStatus> to batchResponseMap : Map<Object,BatchResponseEntry> in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Class",
    "description" : "Rename Class com.linkedin.restli.internal.server.AugmentedRestLiResponseData renamed to com.linkedin.restli.internal.server.RestLiResponseEnvelope",
    "comment" : "<p>There are many type changes supporting this refactoring. Maybe we should use type changes to infer class renames.</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RD-2x",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public getOverridingFormat() : ErrorResponseFormat extracted from public buildErrorResponse(result RestLiServiceException) : ErrorResponse in class com.linkedin.restli.internal.server.methods.response.ErrorResponseBuilder & moved to class com.linkedin.restli.server.RestLiServiceException",
    "comment" : "<p>Extract Method private buildErrorResponse(result RestLiServiceException, errorResponseFormat ErrorResponseFormat) : ErrorResponse extracted from public buildErrorResponse(result RestLiServiceException) : ErrorResponse in class com.linkedin.restli.internal.server.methods.response.ErrorResponseBuilder<br />The original method delegates to the extracted one:<br /><span class='blob-code-inner blob-code-marker' data-code-marker=' '><span class='pl-k'>return</span> buildErrorResponse(result, result<span class='pl-k'>.</span>hasOverridingErrorResponseFormat() <span class='pl-k'>?</span> result<span class='pl-k'>.</span>getOverridingFormat() <span class='pl-k'>:</span> _errorResponseFormat);<br />The second argument is new code.</span></p>",
    "validation" : "FP",
    "detectionTools" : "RD-2x",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Subclass",
    "description" : "Extract Subclass com.linkedin.restli.internal.server.response.BatchResponseEnvelope from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Subclass",
    "description" : "Extract Subclass com.linkedin.restli.internal.server.response.CollectionResponseEnvelope from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute _serviceException : RestLiServiceException to _exception : RestLiServiceException in class com.linkedin.restli.internal.server.RestLiResponseEnvelope",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getCollectionResponseCustomMetadata() : RecordTemplate from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to public getCollectionResponseCustomMetadata() : RecordTemplate from class com.linkedin.restli.internal.server.response.CollectionResponseEnvelope",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getCollectionResponse() : List<? extends RecordTemplate> from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to public getCollectionResponse() : List<? extends RecordTemplate> from class com.linkedin.restli.internal.server.response.CollectionResponseEnvelope",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public getCollectionResponsePaging() : CollectionMetadata from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to public getCollectionResponsePaging() : CollectionMetadata from class com.linkedin.restli.internal.server.response.CollectionResponseEnvelope",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute private _collectionResponseCustomMetadata : RecordTemplate from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData to private _collectionResponseCustomMetadata : RecordTemplate from class com.linkedin.restli.internal.server.response.CollectionResponseEnvelope",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getEntityResponse() : RecordTemplate renamed to public getStatus() : HttpStatus in class com.linkedin.restli.server.RestLiResponseData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getCollectionResponse() : List<? extends RecordTemplate> renamed to public getRecordResponseEnvelope() : RecordResponseEnvelope in class com.linkedin.restli.server.RestLiResponseData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getCollectionResponsePaging() : CollectionMetadata renamed to public getCollectionResponseEnvelope() : CollectionResponseEnvelope in class com.linkedin.restli.server.RestLiResponseData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getCollectionResponseCustomMetadata() : RecordTemplate renamed to public getBatchResponseEnvelope() : BatchResponseEnvelope in class com.linkedin.restli.server.RestLiResponseData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getBatchResponseMap() : Map<?,? extends RecordTemplate> renamed to public getEmptyResponseEnvelope() : EmptyResponseEnvelope in class com.linkedin.restli.server.RestLiResponseData",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>...) : AugmentedRestLiResponseData renamed to private buildEntityResponse(routingResult RoutingResult, mergedResponse Map<Object,BatchResponseEntry>) : Map<Object,EntityResponse<RecordTemplate>> in class com.linkedin.restli.internal.server.methods.response.BatchGetResponseBuilder",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @SuppressWarnings(\"unchecked\") in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.BatchGetResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @SuppressWarnings(\"unchecked\") in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method public getStatus() : HttpStatus from class com.linkedin.restli.internal.server.RestLiResponseEnvelope",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Override in method public getCollectionResponse() : List<? extends RecordTemplate> from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Override in method public getCollectionResponsePaging() : CollectionMetadata from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Override in method public getCollectionResponseCustomMetadata() : RecordTemplate from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Thrown Exception Type",
    "description" : "Remove Thrown Exception Type RestLiResponseDataException in method public testFilterResponseContextAdapter() : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier public to protected in method protected setStatus(status HttpStatus) : void from class com.linkedin.restli.internal.server.RestLiResponseEnvelope",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Attribute Modifier",
    "description" : "Remove Attribute Modifier final in attribute private _headers : Map<String,String> from class com.linkedin.restli.internal.server.AugmentedRestLiResponseData",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type responseData : AugmentedRestLiResponseData to responseData : RestLiResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.BatchCreateResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @SuppressWarnings(\"unchecked\") in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.BatchCreateResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter Modifier",
    "description" : "Add Parameter Modifier final in parameter resourceMethod : ResourceMethod in method public testOnErrorWithFiltersExceptionFromFirstFilterSecondFilterHandles(resourceMethod ResourceMethod, entityFromFilter2 Object) : void from class com.linkedin.restli.internal.server.TestRestLiCallback",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Variable Modifier",
    "description" : "Remove Variable Modifier final in variable mergedResults : Map<Object,UpdateStatus> in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : AugmentedRestLiResponseData from class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Class Modifier",
    "description" : "Add Class Modifier abstract in class com.linkedin.restli.internal.server.RestLiResponseEnvelope",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Variable",
    "description" : "Extract Variable response : CollectionResponseEnvelope in method public buildResponse(routingResult RoutingResult, responseData RestLiResponseEnvelope) : PartialRestResponse from class com.linkedin.restli.internal.server.methods.response.CollectionResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Class",
    "description" : "Move Class com.linkedin.restli.internal.server.AugmentedRestLiResponseData.ResponseType moved to com.linkedin.restli.internal.server.ResponseType",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Class Access Modifier",
    "description" : "Change Class Access Modifier private to public in class com.linkedin.restli.internal.server.ResponseType",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Inline Variable",
    "description" : "Inline Variable context : ServerResourceContext in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : AugmentedRestLiResponseData from class com.linkedin.restli.internal.server.methods.response.BatchGetResponseBuilder",
    "comment" : "<p>inlined to final Map&lt;Object, RestLiServiceException&gt; contextErrors = ((ServerResourceContext) routingResult.getContext()).getBatchKeyErrors();</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable key : Object to entry : Map.Entry<Object,UpdateResponse> in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type key : Object to entry : Map.Entry<Object,UpdateResponse> in method public buildRestLiResponseData(request RestRequest, routingResult RoutingResult, result Object, headers Map<String,String>) : RestLiResponseEnvelope from class com.linkedin.restli.internal.server.methods.response.BatchUpdateResponseBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 2657
}, {
  "id" : 1143517,
  "repository" : "https://github.com/BuildCraft/BuildCraft.git",
  "sha1" : "a5cdd8c4b10a738cb44819d7cc2fee5f5965d4a0",
  "url" : "https://github.com/BuildCraft/BuildCraft/commit/a5cdd8c4b10a738cb44819d7cc2fee5f5965d4a0",
  "author" : "Hea3veN",
  "time" : "7/17/15 8:32 AM",
  "refactorings" : [ {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute public index : BlockIndex from class buildcraft.api.robots.ResourceId to public index : BlockIndex from class buildcraft.api.robots.ResourceIdBlock",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute public side : ForgeDirection from class buildcraft.api.robots.ResourceId to public side : ForgeDirection from class buildcraft.api.robots.ResourceIdBlock",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Method",
    "description" : "Extract Method private getAvailableRequests(station DockingStation) : Collection<StackRequest> extracted from private getOrderFromRequestingStation(station DockingStation, take boolean) : StackRequest in class buildcraft.robotics.ai.AIRobotSearchStackRequest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "0",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "Lots of added statements"
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute public index : BlockIndex from class buildcraft.api.robots.ResourceId to private index : BlockIndex from class buildcraft.api.robots.ResourceIdRequest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceId to public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceIdBlock",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceId to public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceIdRequest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Attribute",
    "description" : "Push Down Attribute public side : ForgeDirection from class buildcraft.api.robots.ResourceId to private side : ForgeDirection from class buildcraft.api.robots.ResourceIdRequest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract Method",
    "description" : "Extract Method private releaseCurrentRequest() : void extracted from public delegateAIEnded(ai AIRobot) : void in class buildcraft.robotics.boards.BoardRobotDelivery",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "0",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "Lots of added statements"
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public provideItemsForRequest(i int, stack ItemStack) : ItemStack renamed to public offerItem(i int, stack ItemStack) : ItemStack in class buildcraft.robotics.TileRequester",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public provideItemsForRequest(i int, stack ItemStack) : ItemStack renamed to public offerItem(slot int, stack ItemStack) : ItemStack in class buildcraft.builders.TileBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getNumberOfRequests() : int renamed to public getRequestsCount() : int in class buildcraft.builders.TileBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getNumberOfRequests() : int renamed to public getRequestsCount() : int in class buildcraft.robotics.TileRequester",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getAvailableRequest(i int) : StackRequest renamed to public getRequest(slot int) : ItemStack in class buildcraft.builders.TileBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public setStation(station DockingStation) : void extracted from private getOrderFromRequestingStation(station DockingStation, take boolean) : StackRequest in class buildcraft.robotics.ai.AIRobotSearchStackRequest & moved to class buildcraft.robotics.StackRequest",
    "comment" : "<p>Extract and Move to the inner class</p><p>This is extract to other class indeed</p><p>There is one statement (setting&nbsp;<span class='blob-code-inner'>station) which is now being extracted as a setter. The setter does other stuff as well.</span></p>",
    "validation" : "TP",
    "detectionTools" : "RefDiff",
    "validators" : "Davood, Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Attribute",
    "description" : "Move Attribute public station : DockingStation from class buildcraft.api.robots.StackRequest to public station : DockingStation from class buildcraft.robotics.ai.AIRobotSearchStackRequest",
    "comment" : "<p>new</p><p>DockingStation still exists, it has been moved apparently. It still has statation</p>",
    "validation" : "FP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : "Matin, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter i : int to slot : int in method public offerItem(slot int, stack ItemStack) : ItemStack from class buildcraft.builders.TileBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable request : StackRequest to requestStack : ItemStack in method public getRequest(slot int) : ItemStack from class buildcraft.builders.TileBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method protected readFromNBT(nbt NBTTagCompound) : void from class buildcraft.api.robots.ResourceId to protected readFromNBT(nbt NBTTagCompound) : void from class buildcraft.api.robots.ResourceIdBlock",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter i : int to slot : int in method public getRequest(slot int) : ItemStack from class buildcraft.api.robots.IRequestProvider",
    "comment" : "<p>Interface method</p>",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter i : int to slot : int in method public offerItem(slot int, stack ItemStack) : ItemStack from class buildcraft.api.robots.IRequestProvider",
    "comment" : "<p>Interface method</p>",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter i : int to slot : int in method public getRequest(slot int) : ItemStack from class buildcraft.builders.TileBuilder",
    "comment" : "<p><span class='blob-code-inner blob-code-marker' data-code-marker='-'><span class='pl-k'>public</span> <span class='pl-smi x x-first'>StackRequest</span> <span class='pl-en x x-last'>getAvailableRequest</span>(<span class='pl-k'>int</span> <span class='pl-v x x-first x-last'>i</span>)</span> renamed to <span class='blob-code-inner blob-code-marker' data-code-marker=' '><span class='pl-k'>public</span> <span class='pl-smi x x-first'>ItemStack</span> <span class='pl-en x x-last'>getRequest</span>(<span class='pl-k'>int</span> <span class='pl-v x x-first x-last'>slot</span>)</span></p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getAvailableRequest(i int) : StackRequest renamed to public getRequest(slot int) : ItemStack in class buildcraft.api.robots.IRequestProvider",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public provideItemsForRequest(i int, stack ItemStack) : ItemStack renamed to public offerItem(slot int, stack ItemStack) : ItemStack in class buildcraft.api.robots.IRequestProvider",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getNumberOfRequests() : int renamed to public getRequestsCount() : int in class buildcraft.api.robots.IRequestProvider",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getRequest(index int) : ItemStack renamed to public getRequestTemplate(index int) : ItemStack in class buildcraft.robotics.TileRequester",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type StackRequest to ItemStack in method public getRequest(slot int) : ItemStack from class buildcraft.builders.TileBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type StackRequest to ItemStack in method public getRequest(slot int) : ItemStack from class buildcraft.api.robots.IRequestProvider",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type request : StackRequest to requestStack : ItemStack in method public getRequest(slot int) : ItemStack from class buildcraft.builders.TileBuilder",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type StackRequest to ItemStack in method public getRequest(i int) : ItemStack in class buildcraft.robotics.TileRequester",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type r : StackRequest to request : ItemStack in method public getRequest(i int) : ItemStack from class buildcraft.robotics.TileRequester",
    "comment" : "null",
    "validation" : "CTP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public hashCode() : int from class buildcraft.api.robots.ResourceId to public hashCode() : int from class buildcraft.api.robots.ResourceIdRequest",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public getStack() : ItemStack extracted from private getOrderFromRequestingStation(station DockingStation, take boolean) : StackRequest in class buildcraft.robotics.ai.AIRobotSearchStackRequest & moved to class buildcraft.robotics.StackRequest",
    "comment" : "<p>Field access replaced with getter</p>",
    "validation" : "FP",
    "detectionTools" : "RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public hashCode() : int from class buildcraft.api.robots.ResourceId to public hashCode() : int from class buildcraft.api.robots.ResourceIdBlock",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public getStack() : ItemStack extracted from public delegateAIEnded(ai AIRobot) : void in class buildcraft.robotics.ai.AIRobotDeliverRequested & moved to class buildcraft.robotics.StackRequest",
    "comment" : "<p>I think this is more replace field with getter and not extract method.</p>",
    "validation" : "FP",
    "detectionTools" : "RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method package getNumberOfRequests() : int renamed to package getRequestsCount() : int in class buildcraft.api.robots.IRequestProvider",
    "comment" : "<p>abstract method</p>",
    "validation" : "FP",
    "detectionTools" : "RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public getStack() : ItemStack extracted from public delegateAIEnded(ai AIRobot) : void in class buildcraft.robotics.boards.BoardRobotDelivery & moved to class buildcraft.robotics.StackRequest",
    "comment" : "<p>Field Access replaced with getter</p>",
    "validation" : "FP",
    "detectionTools" : "RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getAvailableRequest(i int) : StackRequest renamed to public getRequest(i int) : ItemStack in class buildcraft.robotics.TileRequester",
    "comment" : "<p><a href='https://github.com/BuildCraft/BuildCraft/commit/a5cdd8c4b10a738cb44819d7cc2fee5f5965d4a0?diff=split#diff-f52cf58b7470704577d547843dcf561aL171'>https://github.com/BuildCraft/BuildCraft/commit/a5cdd8c4b10a738cb44819d7cc2fee5f5965d4a0?diff=split#diff-f52cf58b7470704577d547843dcf561aL171</a></p>",
    "validation" : "CTP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method protected readFromNBT(nbt NBTTagCompound) : void from class buildcraft.api.robots.ResourceIdBlock",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier public to private in attribute private index : BlockIndex from class buildcraft.api.robots.ResourceIdRequest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier public to private in attribute private side : ForgeDirection from class buildcraft.api.robots.ResourceIdRequest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type compareId : ResourceId to compareId : ResourceIdRequest in method public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceIdRequest",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type compareId : ResourceId to compareId : ResourceIdBlock in method public equals(obj Object) : boolean from class buildcraft.api.robots.ResourceIdBlock",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 2449
}, {
  "id" : 1155451,
  "repository" : "https://github.com/droolsjbpm/jbpm.git",
  "sha1" : "3815f293ba9338f423315d93a373608c95002b15",
  "url" : "https://github.com/droolsjbpm/jbpm/commit/3815f293ba9338f423315d93a373608c95002b15",
  "author" : "Marco Rietveld",
  "time" : "8/1/15 7:38 PM",
  "refactorings" : [ {
    "type" : "Extract Superclass",
    "description" : "Extract Superclass org.jbpm.process.audit.JPAService from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method protected convertListToInterfaceList(internalResult List<C>, interfaceType Class<I>) : List<I> from class org.jbpm.process.audit.JPAAuditLogService to public convertListToInterfaceList(internalResult List<C>, interfaceType Class<I>) : List<I> from class org.jbpm.query.jpa.impl.QueryCriteriaUtil",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : "Matin",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Class",
    "description" : "Rename Class org.jbpm.services.task.commands.TaskQueryDataCommand renamed to org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public initiator(createdById String...) : TaskQueryBuilder renamed to public createdBy(createdById String...) : TaskQueryBuilder in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : "<p><a href='3780'>http://refactoring.encs.concordia.ca/oracle/refactoring-details/1155451/3780</a></p>",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public taskOwner(taskOwnerId String...) : TaskQueryBuilder renamed to public actualOwner(taskOwnerId String...) : TaskQueryBuilder in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public buildQuery() : ParametrizedQuery<TaskSummary> renamed to public build() : ParametrizedQuery<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public addAppropriateParam(listId String, param T...) : QueryCriteria renamed to public addParameter(listId String, param T...) : QueryCriteria in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "<p><a href='3783'>http://refactoring.encs.concordia.ca/oracle/refactoring-details/1155451/3783</a>&nbsp;TP&nbsp;</p>",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RefDiff, GumTreeDiff, RD-1x, RMiner-1x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getQueryData() : QueryData renamed to public getQueryWhere() : QueryWhere in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Inline Method",
    "description" : "Inline Method private getAppropriateQueryCriteria(listId String, valueListSize int) : QueryCriteria inlined to public addParameter(listId String, param T...) : QueryCriteria in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "0",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "resetGroup() statement hasn't been inlined"
    }
  }, {
    "type" : "Inline Method",
    "description" : "Inline Method private getAppropriateQueryCriteria(listId String, valueListSize int) : QueryCriteria inlined to public addRangeParameter(listId String, param T, start boolean) : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "0",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "resetGroup() statement hasn't been inlined"
    }
  }, {
    "type" : "Inline Method",
    "description" : "Inline Method private resetGroup() : void inlined to public clear() : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "1",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : "Rename Attribute on top of Inline Method"
    }
  }, {
    "type" : "Rename Class",
    "description" : "Rename Class org.jbpm.query.jpa.data.QueryWhere.ParameterType renamed to org.jbpm.query.jpa.data.QueryWhere.QueryCriteriaType",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x",
    "validators" : "Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public orderBy(orderBy OrderBy) : TaskQueryBuilder renamed to private getOrderByListId(field OrderBy) : String in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : "<p>The two methods are doing the same thing AFAICS</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff, RD-1x, RD-2x",
    "validators" : "Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public queryProcessInstanceLogs(queryData QueryData) : List<org.kie.api.runtime.manager.audit.ProcessInstanceLog> renamed to public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "<p>The method is renamed in the interface and in the implementors and the call sites</p>",
    "validation" : "TP",
    "detectionTools" : "RefDiff",
    "validators" : "Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public startGroup() : void renamed to public newGroup() : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "<p>There is some overlap in the methods. The original method is not called. The new method seems to be called once in the added code.</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, RefDiff",
    "validators" : "Laleh, Davood",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public setAscending(listId String) : void extracted from public clear() : TaskQueryBuilder in class org.jbpm.services.task.impl.TaskQueryBuilderImpl & moved to class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "<p>Extract and Move to other class</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh, Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public setAscending(listId String) : void extracted from public TaskQueryBuilderImpl(userId String, taskCmdService CommandService) in class org.jbpm.services.task.impl.TaskQueryBuilderImpl & moved to class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "<p>Extract and Move to other class</p><p>When I consider only the moved statements, I conclude that it is FP. However, it might be TP if we semantically evaluate the statements before and after the move.</p><p>Unfortunately, Q<span class='blob-code-inner'><span class='x x-first x-last'>ueryData and QueryContex are external resources and I am not able to do such semantic analysis.</span></span></p><p>&nbsp;</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh, Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public setAscending(listId String) : void extracted from public getTasksByVariousFields(userId String, parameters Map<String,List<?>>, union boolean) : List<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryServiceImpl & moved to class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "<p>Extract and Move to other class</p>",
    "validation" : "FP",
    "detectionTools" : "RefDiff",
    "validators" : "Laleh, Automatic",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public getQueryData() : QueryData renamed to public getQueryWhere() : QueryWhere in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public setQueryData(queryData QueryData) : void renamed to public setQueryWhere(queryWhere QueryWhere) : void in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public AuditNodeInstanceLogQueryCommand(queryWhere QueryWhere) from class org.jbpm.process.audit.command.AuditNodeInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public AuditProcessInstanceLogQueryCommand(queryWhere QueryWhere) from class org.jbpm.process.audit.command.AuditProcessInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public AuditVariableInstanceLogQueryCommand(queryWhere QueryWhere) from class org.jbpm.process.audit.command.AuditVariableInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter orderBy : OrderBy to field : OrderBy in method private getOrderByListId(field OrderBy) : String from class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public setQueryWhere(queryWhere QueryWhere) : void from class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryParameters : QueryWhere to queryWhere : QueryWhere in method public QueryWhere(queryWhere QueryWhere) from class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter deadlineSummaryImpl : DeadlineSummaryImpl to deadlineSummary : DeadlineSummary in method private executedeadLine(ctx TaskContext, persistenceContext TaskPersistenceContext, task Task, deadlineSummary DeadlineSummary, taskData TaskData) : Void from class org.jbpm.services.task.commands.ExecuteReminderCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter data : QueryData to queryWhere : QueryWhere in method public TaskQueryWhereCommand(queryWhere QueryWhere) from class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable deadlineSummaryImpl : DeadlineSummaryImpl to deadlineSummary : DeadlineSummary in method public execute(context Context) : Void from class org.jbpm.services.task.commands.ExecuteReminderCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable newCriteriaGroupParent : Object to grandparent : Object in method public endGroup() : void from class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute currentGroupParents : Stack<Object> to ancestry : Stack<Object> in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute currentGroupCriteria : List<QueryCriteria> to currentCriteria : List<QueryCriteria> in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditNodeInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public ascending() : T from class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl to public ascending(field OrderBy) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Push Down Method",
    "description" : "Push Down Method public descending() : T from class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl to public ascending(field OrderBy) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method private getEntityManager() : EntityManager from class org.jbpm.process.audit.JPAAuditLogService to protected getEntityManager() : EntityManager from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method private closeEntityManager(em EntityManager, transaction Object) : void from class org.jbpm.process.audit.JPAAuditLogService to protected closeEntityManager(em EntityManager, transaction Object) : void from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method private executeQuery(query Query, em EntityManager, type Class<T>) : List<T> from class org.jbpm.process.audit.JPAAuditLogService to public executeQuery(query Query, em EntityManager, type Class<T>) : List<T> from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method public dispose() : void from class org.jbpm.process.audit.JPAAuditLogService to public dispose() : void from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method public setPersistenceUnitName(persistenceUnitName String) : void from class org.jbpm.process.audit.JPAAuditLogService to public setPersistenceUnitName(persistenceUnitName String) : void from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method private joinTransaction(em EntityManager) : Object from class org.jbpm.process.audit.JPAAuditLogService to protected joinTransaction(em EntityManager) : Object from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Method",
    "description" : "Pull Up Method public getPersistenceUnitName() : String from class org.jbpm.process.audit.JPAAuditLogService to public getPersistenceUnitName() : String from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RD-2x, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Attribute",
    "description" : "Pull Up Attribute private persistenceUnitName : String from class org.jbpm.process.audit.JPAAuditLogService to protected persistenceUnitName : String from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Pull Up Attribute",
    "description" : "Pull Up Attribute protected persistenceStrategy : PersistenceStrategy from class org.jbpm.process.audit.JPAAuditLogService to protected persistenceStrategy : PersistenceStrategy from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner, RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditProcessInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditVariableInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public AuditNodeInstanceLogQueryCommand(queryWhere QueryWhere) from class org.jbpm.process.audit.command.AuditNodeInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public AuditProcessInstanceLogQueryCommand(queryWhere QueryWhere) from class org.jbpm.process.audit.command.AuditProcessInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public AuditVariableInstanceLogQueryCommand(queryWhere QueryWhere) from class org.jbpm.process.audit.command.AuditVariableInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type deadlineSummaryImpl : DeadlineSummaryImpl to deadlineSummary : DeadlineSummary in method private executedeadLine(ctx TaskContext, persistenceContext TaskPersistenceContext, task Task, deadlineSummary DeadlineSummary, taskData TaskData) : Void from class org.jbpm.services.task.commands.ExecuteReminderCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type type : ParameterType to type : QueryCriteriaType in method private QueryCriteria(listId String, type QueryCriteriaType) from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type type : ParameterType to type : QueryCriteriaType in method public QueryCriteria(listId String, union boolean, type QueryCriteriaType, valueListSize int) from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type union : Boolean to union : boolean in method public setUnion(union boolean) : void from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type type : ParameterType to type : QueryCriteriaType in method public setType(type QueryCriteriaType) : void from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type data : QueryData to queryWhere : QueryWhere in method public TaskQueryWhereCommand(queryWhere QueryWhere) from class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public setQueryWhere(queryWhere QueryWhere) : void from class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type List<DeadlineSummaryImpl> to List<DeadlineSummary> in method private getAlldeadlines(persistenceContext TaskPersistenceContext, taskData TaskData) : List<DeadlineSummary> from class org.jbpm.services.task.commands.ExecuteReminderCommand",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type TaskQueryBuilder to String in method private getOrderByListId(field OrderBy) : String from class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type QueryData to QueryWhere in method public getQueryWhere() : QueryWhere from class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type Boolean to boolean in method public isUnion() : boolean from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type ParameterType to QueryCriteriaType in method public getType() : QueryCriteriaType from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type ErrorInfoLogDeleteBuilder to ErrorInfoDeleteBuilder in method public errorInfoLogDeleteBuilder() : ErrorInfoDeleteBuilder from class org.jbpm.executor.impl.jpa.ExecutorJPAAuditService",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type QueryData to QueryWhere in method public getQueryWhere() : QueryWhere from class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditNodeInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditProcessInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.process.audit.command.AuditVariableInstanceLogQueryCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type deadlineSummaryImpl : DeadlineSummaryImpl to deadlineSummary : DeadlineSummary in method public execute(context Context) : Void from class org.jbpm.services.task.commands.ExecuteReminderCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method public execute(context Context) : Void from class org.jbpm.services.task.commands.ExecuteReminderCommand",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method private getAlldeadlines(persistenceContext TaskPersistenceContext, taskData TaskData) : List<DeadlineSummary> from class org.jbpm.services.task.commands.ExecuteReminderCommand",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method public execute(context Context) : Void from class org.jbpm.services.task.commands.InitDeadlinesCommand",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type resultList : List<DeadlineSummaryImpl> to resultList : List<DeadlineSummary> in method public unschedule(taskId long, type DeadlineType) : void from class org.jbpm.services.task.impl.TaskDeadlinesServiceImpl",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type union : Boolean to union : boolean in class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type type : ParameterType to type : QueryCriteriaType in class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type type : ParameterType to type : QueryCriteriaType in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type origType : ParameterType to origType : QueryCriteriaType in method public addRangeParameter(listId String, param T, start boolean) : void from class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public queryLogs(queryWhere QueryWhere, queryType Class<T>, resultType Class<R>) : List<R> in class org.jbpm.process.audit.AuditLogService",
    "comment" : "<p>queryNodeInstanceLogs()&nbsp;queryVariableInstanceLogs()&nbsp;queryProcessInstanceLogs() replaced with&nbsp;queryLogs()</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to queryWhere : QueryWhere in method public queryLogs(queryWhere QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.CommandBasedAuditLogService",
    "comment" : "<p>queryNodeInstanceLogs()&nbsp;queryVariableInstanceLogs()&nbsp;queryProcessInstanceLogs() replaced with&nbsp;queryLogs()</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute persistenceUnitName : String to AUDIT_LOG_PERSISTENCE_UNIT_NAME : String in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "<p>persistenceUnitName has been pulled up to JPAService</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter query : Query to queryData : QueryWhere in method public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to resultClass : Class<R> in method public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "<p>queryNodeInstanceLogs()&nbsp;queryVariableInstanceLogs()&nbsp;queryProcessInstanceLogs() replaced with&nbsp;queryLogs()</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to queryType : Class in method protected getQueryCriteriaUtil(queryType Class) : QueryCriteriaUtil in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter interfaceType : Class<I> to queryWhere : QueryWhere in method public doQuery(queryWhere QueryWhere, queryType Class<T>) : List<T> in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter type : Class<T> to queryType : Class<T> in method public doQuery(queryWhere QueryWhere, queryType Class<T>) : List<T> in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "<p>unrelated methods</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter language : String to description : String in method public description(description String) : TaskQueryBuilder in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : "<p>unrelated methods</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter orderBy : OrderBy to field : OrderBy in method public ascending(field OrderBy) : TaskQueryBuilder in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : "<p>orderBy(<span class='pl-smi'>OrderBy</span> <span class='pl-v'>orderBy</span>) has been renamed to getOrderByListId(<span class='pl-smi'>OrderBy</span> <span class='pl-v'>field</span>)</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Attribute",
    "description" : "Rename Attribute queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.services.task.impl.TaskQueryBuilderImpl.build.new ParametrizedQuery<TaskSummary>",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Parameter",
    "description" : "Rename Parameter queryData : QueryData to queryObj : Object in method public query(userId String, queryObj Object) : List<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryServiceImpl",
    "comment" : "<p><span class='blob-code-inner blob-code-marker' data-code-marker='-'><span class='pl-k'>public</span> <span class='pl-k'>List&lt;<span class='pl-smi'>TaskSummary</span>&gt;</span> <span class='pl-en'>query</span>( <span class='pl-smi'>String</span> <span class='pl-v'>userId</span>, <span class='pl-smi'>QueryData</span> <span class='pl-v'>queryData</span> )</span> and <span class='blob-code-inner blob-code-marker' data-code-marker=' '><span class='pl-k'>public</span> <span class='pl-k'>List&lt;<span class='pl-smi'>TaskSummary</span>&gt;</span> <span class='pl-en'>query</span>( <span class='pl-smi'>String</span> <span class='pl-v'>userId</span>, <span class='pl-smi'>Object</span> <span class='pl-v'>queryObj</span> )</span> have very different method bodies.</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Variable",
    "description" : "Rename Variable queryData : QueryData to queryWhere : QueryWhere in method public getTasksByVariousFields(userId String, parameters Map<String,List<?>>, union boolean) : List<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryServiceImpl",
    "comment" : "<p>queryData and queryContext are merged into queryWhere (both variables are replaced with queryWhere, but there are more replacements for queryData -&gt; queryWhere)</p>",
    "validation" : "CTP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public queryLogs(queryWhere QueryWhere, queryType Class<T>, resultType Class<R>) : List<R> in class org.jbpm.process.audit.AuditLogService",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type queryData : QueryData to queryWhere : QueryWhere in method public queryLogs(queryWhere QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.CommandBasedAuditLogService",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type query : Query to queryData : QueryWhere in method public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type summary : DeadlineSummaryImpl to summary : DeadlineSummary in method public execute(context Context) : Void from class org.jbpm.services.task.commands.InitDeadlinesCommand",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type summary : DeadlineSummaryImpl to summary : DeadlineSummary in method public unschedule(taskId long, type DeadlineType) : void from class org.jbpm.services.task.impl.TaskDeadlinesServiceImpl",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type List<org.kie.api.runtime.manager.audit.VariableInstanceLog> to List<R> in method public queryLogs(queryWhere QueryWhere, queryType Class<T>, resultType Class<R>) : List<R> in class org.jbpm.process.audit.AuditLogService",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type ParametrizedQuery<VariableInstanceLog> to Class<VariableInstanceLog> in method protected getResultType() : Class<VariableInstanceLog> in class org.jbpm.process.audit.query.VarInstLogQueryBuilderImpl",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type params : List<? extends Object> to criteriaList : List<QueryCriteria> in method public last() : VariableInstanceLogQueryBuilder in class org.jbpm.process.audit.query.VarInstLogQueryBuilderImpl",
    "comment" : "<p>The implementation changed significantly</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Type",
    "description" : "Change Attribute Type queryData : QueryData to queryWhere : QueryWhere in class org.jbpm.services.task.impl.TaskQueryBuilderImpl.build.new ParametrizedQuery<TaskSummary>",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type cmd : TaskQueryDataCommand to cmd : TaskQueryWhereCommand in method public getResultList() : List<TaskSummary> from class org.jbpm.services.task.impl.TaskQueryBuilderImpl.build.new ParametrizedQuery<TaskSummary>",
    "comment" : "<p>Alternative description for<br />Change Variable Type cmd : TaskQueryDataCommand to cmd : TaskQueryWhereCommand in method public build() : ParametrizedQuery&lt;TaskSummary&gt; in class org.jbpm.services.task.impl.TaskQueryBuilderImpl</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type queryData : QueryData to queryWhere : QueryWhere in method public getTasksByVariousFields(userId String, parameters Map<String,List<?>>, union boolean) : List<TaskSummary> from class org.jbpm.services.task.impl.TaskQueryServiceImpl",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type queryAppender : QueryAndParameterAppender to queryWhere : QueryWhere in method public query(userId String, queryObj Object) : List<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryServiceImpl",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type xmlValue : Object to addValues : List in method package setParameter(index int, value Object, listSize int) : void in class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "<p><span class='blob-code-inner blob-code-marker' data-code-marker='-'><span class='pl-k'>List&lt;<span class='pl-smi'>Object</span>&gt;</span> values <span class='pl-k'>=</span> getValues();</span> -&gt; <span class='blob-code-inner blob-code-marker' data-code-marker=' '><span class='pl-smi'>List</span> addValues;</span></p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type criteria : QueryCriteria to origType : QueryCriteriaType in method public addRangeParameters(listId String, paramMin T, paramMax T) : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public queryNodeInstanceLogs(queryData QueryData) : List<org.kie.api.runtime.manager.audit.NodeInstanceLog> renamed to public queryLogs(queryWhere QueryWhere, queryType Class<T>, resultType Class<R>) : List<R> in class org.jbpm.process.audit.AuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public queryNodeInstanceLogs(queryData QueryData) : List<org.kie.api.runtime.manager.audit.NodeInstanceLog> renamed to public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type List<org.kie.api.runtime.manager.audit.NodeInstanceLog> to List<R> in method public queryLogs(queryWhere QueryWhere, queryType Class<T>, resultType Class<R>) : List<R> from class org.jbpm.process.audit.AuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type List<org.kie.api.runtime.manager.audit.NodeInstanceLog> to List<R> in method public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Variable Type",
    "description" : "Change Variable Type results : List<NodeInstanceLog> to results : List<T> in method public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Parameter Type",
    "description" : "Change Parameter Type queryData : QueryData to queryData : QueryWhere in method public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Method",
    "description" : "Move Method public execute(cntxt Context) : List<TaskSummary> from class org.jbpm.services.task.commands.TaskQueryDataCommand to public execute(cntxt Context) : List<TaskSummary> from class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : "<p>Rename Class org.jbpm.services.task.commands.TaskQueryDataCommand renamed to org.jbpm.services.task.commands.TaskQueryWhereCommand</p>",
    "validation" : "FP",
    "detectionTools" : "RD-1x",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Extract And Move Method",
    "description" : "Extract And Move Method public setCount(maxResults Integer) : void extracted from public getTasksByVariousFields(userId String, parameters Map<String,List<?>>, union boolean) : List<TaskSummary> in class org.jbpm.services.task.impl.TaskQueryServiceImpl & moved to class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "RD-2x",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Move Source Folder",
    "description" : "Move Source Folder jbpm-human-task/jbpm-human-task-core to jbpm-human-task/jbpm-human-task-jpa",
    "comment" : null,
    "validation" : "UKN",
    "detectionTools" : "RMiner-1x",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public orderBy(field OrderBy) : NodeInstanceLogQueryBuilder renamed to protected getResultType() : Class<NodeInstanceLog> in class org.jbpm.process.audit.query.NodeInstLogQueryBuilderImpl",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public queryVariableInstanceLogs(queryData QueryData) : List<org.kie.api.runtime.manager.audit.VariableInstanceLog> renamed to public queryLogs(queryWhere QueryWhere, queryType Class<T>, resultType Class<R>) : List<R> in class org.jbpm.process.audit.AuditLogService",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public like() : T renamed to public newGroup() : T in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public equals() : T renamed to public endGroup() : T in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public clear() : T renamed to public like() : T in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public ascending() : T renamed to public equals() : T in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public descending() : T renamed to public clear() : T in class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public orderBy(field OrderBy) : ProcessInstanceLogQueryBuilder renamed to protected getResultType() : Class<ProcessInstanceLog> in class org.jbpm.process.audit.query.ProcInstLogQueryBuilderImpl",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public buildQuery() : ParametrizedQuery<ProcessInstanceLog> renamed to protected getQueryType() : Class in class org.jbpm.process.audit.query.ProcInstLogQueryBuilderImpl",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public queryNodeInstanceLogs(queryData QueryData) : List<org.kie.api.runtime.manager.audit.NodeInstanceLog> renamed to public queryLogs(queryWhere QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.CommandBasedAuditLogService",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private addCriteria(criteria QueryCriteria) : void renamed to public addRangeParameters(listId String, paramMin T, paramMax T) : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public startGroup() : void renamed to private addCriteria(criteria QueryCriteria) : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public endGroup() : void renamed to public newGroup() : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private resetGroup() : void renamed to public setCriteria(criteria List<QueryCriteria>) : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public setToRange() : void renamed to public setToNormal() : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public setToNormal() : void renamed to public setToRange() : void in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public setUnion(union Boolean) : void renamed to public setFirst(first boolean) : void in class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public language(language String) : TaskQueryBuilder renamed to public createdOnRange(createdOnMin Date, createdOnMax Date) : TaskQueryBuilder in class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method private executeQuery(query Query, em EntityManager, type Class<T>) : List<T> renamed to public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Rename Method",
    "description" : "Rename Method public queryProcessInstanceLogs(queryData QueryData) : List<org.kie.api.runtime.manager.audit.ProcessInstanceLog> renamed to protected getQueryCriteriaUtil(queryType Class) : QueryCriteriaUtil in class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "null",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Ameya",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @Override in method public ascending(field OrderBy) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : "null",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @SuppressWarnings(\"unchecked\") in method public processInstanceId(processInstanceId long...) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @SuppressWarnings(\"unchecked\") in method public processId(processId String...) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @SuppressWarnings(\"unchecked\") in method public date(date Date...) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @SuppressWarnings(\"unchecked\") in method public dateRangeStart(rangeStart Date) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @SuppressWarnings(\"unchecked\") in method public dateRangeEnd(rangeStart Date) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Override in method public orderBy(orderBy OrderBy) : TaskQueryBuilder from class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Override in method public dispose() : void from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Modify Attribute Annotation",
    "description" : "Modify Attribute Annotation @XmlElements(value = {@XmlElement(name=\"activate-task\",type=ActivateTaskCommand.class),@XmlElement(name=\"add-attachment\",type=AddAttachmentCommand.class),@XmlElement(name=\"add-comment\",type=AddCommentCommand.class),@XmlElement(name=\"add-content\",type=AddContentCommand.class),@XmlElement(name=\"add-group\",type=AddGroupCommand.class),@XmlElement(name=\"add-task\",type=AddTaskCommand.class),@XmlElement(name=\"add-user\",type=AddUserCommand.class),@XmlElement(name=\"add-users-groups\",type=AddUsersGroupsCommand.class),@XmlElement(name=\"archive-tasks\",type=ArchiveTasksCommand.class),@XmlElement(name=\"cancel-deadline\",type=CancelDeadlineCommand.class),@XmlElement(name=\"claim-next-available-task\",type=ClaimNextAvailableTaskCommand.class),@XmlElement(name=\"claim-task\",type=ClaimTaskCommand.class),@XmlElement(name=\"complete-task\",type=CompleteTaskCommand.class),@XmlElement(name=\"delegate-task\",type=DelegateTaskCommand.class),@XmlElement(name=\"delete-attachment\",type=DeleteAttachmentCommand.class),@XmlElement(name=\"delete-comment\",type=DeleteCommentCommand.class),@XmlElement(name=\"delete-content\",type=DeleteContentCommand.class),@XmlElement(name=\"delete-fault\",type=DeleteFaultCommand.class),@XmlElement(name=\"delete-output\",type=DeleteOutputCommand.class),@XmlElement(name=\"deploy-task-def\",type=DeployTaskDefCommand.class),@XmlElement(name=\"execute-deadlines\",type=ExecuteDeadlinesCommand.class),@XmlElement(name=\"execute-task-rules\",type=ExecuteTaskRulesCommand.class),@XmlElement(name=\"exit-task\",type=ExitTaskCommand.class),@XmlElement(name=\"fail-task\",type=FailTaskCommand.class),@XmlElement(name=\"forward-task\",type=ForwardTaskCommand.class),@XmlElement(name=\"get-active-tasks\",type=GetActiveTasksCommand.class),@XmlElement(name=\"get-all-attachments\",type=GetAllAttachmentsCommand.class),@XmlElement(name=\"get-all-comments\",type=GetAllCommentsCommand.class),@XmlElement(name=\"get-all-content\",type=GetAllContentCommand.class),@XmlElement(name=\"get-all-task-definitions\",type=GetAllTaskDefinitionsCommand.class),@XmlElement(name=\"get-archived-tasks\",type=GetArchivedTasksCommand.class),@XmlElement(name=\"get-attachment\",type=GetAttachmentCommand.class),@XmlElement(name=\"get-comment\",type=GetCommentCommand.class),@XmlElement(name=\"get-completed-tasks-by-user\",type=GetCompletedTasksByUserCommand.class),@XmlElement(name=\"get-completed-tasks\",type=GetCompletedTasksCommand.class),@XmlElement(name=\"get-content\",type=GetContentCommand.class),@XmlElement(name=\"get-group\",type=GetGroupCommand.class),@XmlElement(name=\"get-groups\",type=GetGroupsCommand.class),@XmlElement(name=\"get-org-entity\",type=GetOrgEntityCommand.class),@XmlElement(name=\"get-pending-sub-tasks\",type=GetPendingSubTasksCommand.class),@XmlElement(name=\"get-pending-tasks-by-user\",type=GetPendingTasksByUserCommand.class),@XmlElement(name=\"get-potential-ownders-for-task\",type=GetPotentialOwnersForTaskCommand.class),@XmlElement(name=\"get-sub-tasks\",type=GetSubTasksCommand.class),@XmlElement(name=\"get-task-assigned-as-business-admin\",type=GetTaskAssignedAsBusinessAdminCommand.class),@XmlElement(name=\"get-task-assigned-as-excluded-owner\",type=GetTaskAssignedAsExcludedOwnerCommand.class),@XmlElement(name=\"get-task-assigned-as-initiator\",type=GetTaskAssignedAsInitiatorCommand.class),@XmlElement(name=\"get-task-assigned-as-potential-owner-by-exp-date\",type=GetTaskAssignedAsPotentialOwnerByExpDateCommand.class),@XmlElement(name=\"get-task-assigned-as-potential-owner\",type=GetTaskAssignedAsPotentialOwnerCommand.class),@XmlElement(name=\"get-task-assigned-as-potential-owner-paging\",type=GetTaskAssignedAsPotentialOwnerPagingCommand.class),@XmlElement(name=\"get-task-assigned-as-recipient\",type=GetTaskAssignedAsRecipientCommand.class),@XmlElement(name=\"get-task-assigned-as-stakeholeder\",type=GetTaskAssignedAsStakeholderCommand.class),@XmlElement(name=\"get-task-assigned-by-groups\",type=GetTaskAssignedByGroupsCommand.class),@XmlElement(name=\"get-task-by-work-item-id\",type=GetTaskByWorkItemIdCommand.class),@XmlElement(name=\"get-task\",type=GetTaskCommand.class),@XmlElement(name=\"get-task-content\",type=GetTaskContentCommand.class),@XmlElement(name=\"get-task-definition\",type=GetTaskDefinitionCommand.class),@XmlElement(name=\"get-task-owned-by-exp-date-before-date\",type=GetTaskOwnedByExpDateBeforeDateCommand.class),@XmlElement(name=\"get-task-owned-by-exp-date\",type=GetTaskOwnedByExpDateCommand.class),@XmlElement(name=\"get-task-property\",type=GetTaskPropertyCommand.class),@XmlElement(name=\"get-tasks-by-process-instance-id\",type=GetTasksByProcessInstanceIdCommand.class),@XmlElement(name=\"get-tasks-by-status-by-process-instance-id\",type=GetTasksByStatusByProcessInstanceIdCommand.class),@XmlElement(name=\"get-tasks-by-various-fields\",type=GetTasksByVariousFieldsCommand.class),@XmlElement(name=\"get-tasks-for-process\",type=GetTasksForProcessCommand.class),@XmlElement(name=\"get-tasks-owned\",type=GetTasksOwnedCommand.class),@XmlElement(name=\"get-user\",type=GetUserCommand.class),@XmlElement(name=\"get-user-info\",type=GetUserInfoCommand.class),@XmlElement(name=\"get-user\",type=GetUsersCommand.class),@XmlElement(name=\"init-deadlines\",type=InitDeadlinesCommand.class),@XmlElement(name=\"nominate-task\",type=NominateTaskCommand.class),@XmlElement(name=\"process-sub-task\",type=ProcessSubTaskCommand.class),@XmlElement(name=\"release-task\",type=ReleaseTaskCommand.class),@XmlElement(name=\"remove-all-tasks\",type=RemoveAllTasksCommand.class),@XmlElement(name=\"remove-group\",type=RemoveGroupCommand.class),@XmlElement(name=\"remove-task\",type=RemoveTaskCommand.class),@XmlElement(name=\"remove-tasks\",type=RemoveTasksCommand.class),@XmlElement(name=\"remove-user\",type=RemoveUserCommand.class),@XmlElement(name=\"resume-task\",type=ResumeTaskCommand.class),@XmlElement(name=\"set-task-property\",type=SetTaskPropertyCommand.class),@XmlElement(name=\"skip-task\",type=SkipTaskCommand.class),@XmlElement(name=\"start-task\",type=StartTaskCommand.class),@XmlElement(name=\"stop-task\",type=StopTaskCommand.class),@XmlElement(name=\"suspend-task\",type=SuspendTaskCommand.class),@XmlElement(name=\"undeploy-task-def\",type=UndeployTaskDefCommand.class),@XmlElement(name=\"task-query\",type=TaskQueryDataCommand.class),@XmlElement(name=\"execute-reminder-command\",type=ExecuteReminderCommand.class),@XmlElement(name=\"get-comment-by-id-command\",type=GetCommentByIdCommand.class)}) to @XmlElements(value = {@XmlElement(name=\"activate-task\",type=ActivateTaskCommand.class),@XmlElement(name=\"add-attachment\",type=AddAttachmentCommand.class),@XmlElement(name=\"add-comment\",type=AddCommentCommand.class),@XmlElement(name=\"add-content\",type=AddContentCommand.class),@XmlElement(name=\"add-group\",type=AddGroupCommand.class),@XmlElement(name=\"add-task\",type=AddTaskCommand.class),@XmlElement(name=\"add-user\",type=AddUserCommand.class),@XmlElement(name=\"add-users-groups\",type=AddUsersGroupsCommand.class),@XmlElement(name=\"archive-tasks\",type=ArchiveTasksCommand.class),@XmlElement(name=\"cancel-deadline\",type=CancelDeadlineCommand.class),@XmlElement(name=\"claim-next-available-task\",type=ClaimNextAvailableTaskCommand.class),@XmlElement(name=\"claim-task\",type=ClaimTaskCommand.class),@XmlElement(name=\"complete-task\",type=CompleteTaskCommand.class),@XmlElement(name=\"delegate-task\",type=DelegateTaskCommand.class),@XmlElement(name=\"delete-attachment\",type=DeleteAttachmentCommand.class),@XmlElement(name=\"delete-comment\",type=DeleteCommentCommand.class),@XmlElement(name=\"delete-content\",type=DeleteContentCommand.class),@XmlElement(name=\"delete-fault\",type=DeleteFaultCommand.class),@XmlElement(name=\"delete-output\",type=DeleteOutputCommand.class),@XmlElement(name=\"deploy-task-def\",type=DeployTaskDefCommand.class),@XmlElement(name=\"execute-deadlines\",type=ExecuteDeadlinesCommand.class),@XmlElement(name=\"execute-task-rules\",type=ExecuteTaskRulesCommand.class),@XmlElement(name=\"exit-task\",type=ExitTaskCommand.class),@XmlElement(name=\"fail-task\",type=FailTaskCommand.class),@XmlElement(name=\"forward-task\",type=ForwardTaskCommand.class),@XmlElement(name=\"get-active-tasks\",type=GetActiveTasksCommand.class),@XmlElement(name=\"get-all-attachments\",type=GetAllAttachmentsCommand.class),@XmlElement(name=\"get-all-comments\",type=GetAllCommentsCommand.class),@XmlElement(name=\"get-all-content\",type=GetAllContentCommand.class),@XmlElement(name=\"get-all-task-definitions\",type=GetAllTaskDefinitionsCommand.class),@XmlElement(name=\"get-archived-tasks\",type=GetArchivedTasksCommand.class),@XmlElement(name=\"get-attachment\",type=GetAttachmentCommand.class),@XmlElement(name=\"get-comment\",type=GetCommentCommand.class),@XmlElement(name=\"get-completed-tasks-by-user\",type=GetCompletedTasksByUserCommand.class),@XmlElement(name=\"get-completed-tasks\",type=GetCompletedTasksCommand.class),@XmlElement(name=\"get-content\",type=GetContentCommand.class),@XmlElement(name=\"get-group\",type=GetGroupCommand.class),@XmlElement(name=\"get-groups\",type=GetGroupsCommand.class),@XmlElement(name=\"get-org-entity\",type=GetOrgEntityCommand.class),@XmlElement(name=\"get-pending-sub-tasks\",type=GetPendingSubTasksCommand.class),@XmlElement(name=\"get-pending-tasks-by-user\",type=GetPendingTasksByUserCommand.class),@XmlElement(name=\"get-potential-ownders-for-task\",type=GetPotentialOwnersForTaskCommand.class),@XmlElement(name=\"get-sub-tasks\",type=GetSubTasksCommand.class),@XmlElement(name=\"get-task-assigned-as-business-admin\",type=GetTaskAssignedAsBusinessAdminCommand.class),@XmlElement(name=\"get-task-assigned-as-excluded-owner\",type=GetTaskAssignedAsExcludedOwnerCommand.class),@XmlElement(name=\"get-task-assigned-as-initiator\",type=GetTaskAssignedAsInitiatorCommand.class),@XmlElement(name=\"get-task-assigned-as-potential-owner-by-exp-date\",type=GetTaskAssignedAsPotentialOwnerByExpDateCommand.class),@XmlElement(name=\"get-task-assigned-as-potential-owner\",type=GetTaskAssignedAsPotentialOwnerCommand.class),@XmlElement(name=\"get-task-assigned-as-potential-owner-paging\",type=GetTaskAssignedAsPotentialOwnerPagingCommand.class),@XmlElement(name=\"get-task-assigned-as-recipient\",type=GetTaskAssignedAsRecipientCommand.class),@XmlElement(name=\"get-task-assigned-as-stakeholeder\",type=GetTaskAssignedAsStakeholderCommand.class),@XmlElement(name=\"get-task-assigned-by-groups\",type=GetTaskAssignedByGroupsCommand.class),@XmlElement(name=\"get-task-by-work-item-id\",type=GetTaskByWorkItemIdCommand.class),@XmlElement(name=\"get-task\",type=GetTaskCommand.class),@XmlElement(name=\"get-task-content\",type=GetTaskContentCommand.class),@XmlElement(name=\"get-task-definition\",type=GetTaskDefinitionCommand.class),@XmlElement(name=\"get-task-owned-by-exp-date-before-date\",type=GetTaskOwnedByExpDateBeforeDateCommand.class),@XmlElement(name=\"get-task-owned-by-exp-date\",type=GetTaskOwnedByExpDateCommand.class),@XmlElement(name=\"get-task-property\",type=GetTaskPropertyCommand.class),@XmlElement(name=\"get-tasks-by-process-instance-id\",type=GetTasksByProcessInstanceIdCommand.class),@XmlElement(name=\"get-tasks-by-status-by-process-instance-id\",type=GetTasksByStatusByProcessInstanceIdCommand.class),@XmlElement(name=\"get-tasks-by-various-fields\",type=GetTasksByVariousFieldsCommand.class),@XmlElement(name=\"get-tasks-for-process\",type=GetTasksForProcessCommand.class),@XmlElement(name=\"get-tasks-owned\",type=GetTasksOwnedCommand.class),@XmlElement(name=\"get-user\",type=GetUserCommand.class),@XmlElement(name=\"get-user-info\",type=GetUserInfoCommand.class),@XmlElement(name=\"get-user\",type=GetUsersCommand.class),@XmlElement(name=\"init-deadlines\",type=InitDeadlinesCommand.class),@XmlElement(name=\"nominate-task\",type=NominateTaskCommand.class),@XmlElement(name=\"process-sub-task\",type=ProcessSubTaskCommand.class),@XmlElement(name=\"release-task\",type=ReleaseTaskCommand.class),@XmlElement(name=\"remove-all-tasks\",type=RemoveAllTasksCommand.class),@XmlElement(name=\"remove-group\",type=RemoveGroupCommand.class),@XmlElement(name=\"remove-task\",type=RemoveTaskCommand.class),@XmlElement(name=\"remove-tasks\",type=RemoveTasksCommand.class),@XmlElement(name=\"remove-user\",type=RemoveUserCommand.class),@XmlElement(name=\"resume-task\",type=ResumeTaskCommand.class),@XmlElement(name=\"set-task-property\",type=SetTaskPropertyCommand.class),@XmlElement(name=\"skip-task\",type=SkipTaskCommand.class),@XmlElement(name=\"start-task\",type=StartTaskCommand.class),@XmlElement(name=\"stop-task\",type=StopTaskCommand.class),@XmlElement(name=\"suspend-task\",type=SuspendTaskCommand.class),@XmlElement(name=\"undeploy-task-def\",type=UndeployTaskDefCommand.class),@XmlElement(name=\"task-query\",type=TaskQueryWhereCommand.class),@XmlElement(name=\"execute-reminder-command\",type=ExecuteReminderCommand.class),@XmlElement(name=\"get-comment-by-id-command\",type=GetCommentByIdCommand.class)}) in attribute private mainCommand : TaskCommand<T> from class org.jbpm.services.task.commands.CompositeCommand",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Class Annotation",
    "description" : "Add Class Annotation @SuppressWarnings(\"unchecked\") in class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Class Annotation",
    "description" : "Add Class Annotation @JsonAutoDetect(fieldVisibility = Visibility.ANY, getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE) in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Modify Class Annotation",
    "description" : "Modify Class Annotation @JsonIgnoreProperties({\"union\",\"type\",\"currentGroupCriteria\",\"currentGroupParents\",\"like\",\"range\"}) to @JsonIgnoreProperties({\"union\",\"type\",\"currentGroupCriteria\",\"ancestry\",\"currentParent\",\"addedJoins\"}) in class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Modify Class Annotation",
    "description" : "Modify Class Annotation @XmlRootElement(name = \"task-query-data-command\") to @XmlRootElement(name = \"task-query-where-command\") in class org.jbpm.services.task.commands.TaskQueryWhereCommand",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter queryClass : Class<T> in method public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter resultClass : Class<R> in method public queryLogs(queryData QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter valueListSize : int in method public QueryCriteria(listId String, union boolean, type QueryCriteriaType, valueListSize int) from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Parameter",
    "description" : "Add Parameter field : OrderBy in method public ascending(field OrderBy) : T from class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @SuppressWarnings(\"unchecked\") in method package setParameter(index int, value Object, listSize int) : void from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : "null",
    "validation" : "CTP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @Override in method public queryProcessInstanceLogs(queryData QueryData) : List<org.kie.api.runtime.manager.audit.ProcessInstanceLog> from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "<p>deleted method</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Annotation",
    "description" : "Remove Method Annotation @SuppressWarnings(\"unchecked\") in method protected convertListToInterfaceList(internalResult List<C>, interfaceType Class<I>) : List<I> from class org.jbpm.process.audit.JPAAuditLogService",
    "comment" : "<p>deleted method</p>",
    "validation" : "FP",
    "detectionTools" : "GumTreeDiff",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier public to private in method private getOrderByListId(field OrderBy) : String from class org.jbpm.services.task.impl.TaskQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier package to public in method public addCriteria(criteria QueryCriteria) : void from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier public to private in method private QueryCriteria(listId String, type QueryCriteriaType) from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to protected in method protected getEntityManager() : EntityManager from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to protected in method protected joinTransaction(em EntityManager) : Object from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to protected in method protected closeEntityManager(em EntityManager, transaction Object) : void from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier private to public in method public executeQuery(query Query, em EntityManager, type Class<T>) : List<T> from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Method Access Modifier",
    "description" : "Change Method Access Modifier protected to public in method public convertListToInterfaceList(internalResult List<C>, interfaceType Class<I>) : List<I> from class org.jbpm.query.jpa.impl.QueryCriteriaUtil",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Encapsulate Attribute",
    "description" : "Encapsulate Attribute protected em : EntityManager from class org.jbpm.services.task.persistence.JPATaskPersistenceContext",
    "comment" : "<p>EntityManager getEntityManager()<br />called in method protected EntityManager getEntityManager()<br />jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/TaskQueryCriteriaUtil.java<br />return this.taskQueryService.getEntityManager();</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Encapsulate Attribute",
    "description" : "Encapsulate Attribute private criteria : List<QueryCriteria> from class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "<p>public void setCriteria(List&lt;QueryCriteria&gt; criteria)<br />called in file<br />jbpm-human-task/jbpm-human-task-jpa/src/main/java/org/jbpm/services/task/persistence/TaskQueryCriteriaUtil.java</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Encapsulate Attribute",
    "description" : "Encapsulate Attribute private type : QueryCriteriaType from class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "<p>public QueryCriteriaType getCriteriaType()<br />called in file<br />jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/impl/jpa/ErrorInfoQueryBuilderImpl.java</p>",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Encapsulate Attribute",
    "description" : "Encapsulate Attribute private currentCriteria : List<QueryCriteria> from class org.jbpm.query.jpa.data.QueryWhere",
    "comment" : "<p>public List&lt;QueryCriteria&gt; getCurrentCriteria()<br />is not called in commit</p>",
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Modifier",
    "description" : "Add Method Modifier static in method public convertListToInterfaceList(internalResult List<C>, interfaceType Class<I>) : List<I> from class org.jbpm.query.jpa.impl.QueryCriteriaUtil",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Modifier",
    "description" : "Remove Method Modifier final in method public ascending() : T from class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Remove Method Modifier",
    "description" : "Remove Method Modifier final in method public descending() : T from class org.jbpm.query.jpa.builder.impl.AbstractQueryBuilderImpl",
    "comment" : "null",
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : "Nikos",
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Method Annotation",
    "description" : "Add Method Annotation @SuppressWarnings(\"unchecked\") in method public queryLogs(queryWhere QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> from class org.jbpm.process.audit.CommandBasedAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Return Type",
    "description" : "Change Return Type List<org.kie.api.runtime.manager.audit.NodeInstanceLog> to List<R> in method public queryLogs(queryWhere QueryWhere, queryClass Class<T>, resultClass Class<R>) : List<R> from class org.jbpm.process.audit.CommandBasedAuditLogService",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner, GumTreeDiff",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Add Class Modifier",
    "description" : "Add Class Modifier abstract in class org.jbpm.process.audit.query.AbstractAuditQueryBuilderImpl",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Inline Variable",
    "description" : "Inline Variable xmlValue : Object in method package addParameter(value Object) : void from class org.jbpm.query.jpa.data.QueryCriteria",
    "comment" : null,
    "validation" : "TP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  }, {
    "type" : "Change Attribute Access Modifier",
    "description" : "Change Attribute Access Modifier private to protected in attribute protected persistenceUnitName : String from class org.jbpm.process.audit.JPAService",
    "comment" : null,
    "validation" : "CTP",
    "detectionTools" : "RefactoringMiner",
    "validators" : null,
    "purity" : {
      "purityValue" : "-",
      "purityValidation" : "-",
      "purityComment" : "",
      "mappingState" : "",
      "validationComment" : ""
    }
  } ],
  "refDiffExecutionTime" : 3454
} ]